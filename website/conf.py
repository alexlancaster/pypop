# WordCount documentation build configuration file, created by
# sphinx-quickstart on Fri Jun  8 14:27:52 2018.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import sys
from dataclasses import dataclass, field
from pathlib import Path

import pybtex.plugin
import sphinxcontrib.bibtex.plugin
from pybtex.style.formatting.alpha import Style as AlphaStyle
from pygments.formatters.latex import LatexFormatter
from setuptools_scm import get_version
from sphinx.directives.code import LiteralInclude
from sphinx.highlighting import PygmentsBridge
from sphinxcontrib.bibtex.style.referencing import BracketStyle
from sphinxcontrib.bibtex.style.referencing.author_year import AuthorYearReferenceStyle
from sphinxcontrib.bibtex.style.referencing.extra_year import ExtraYearReferenceStyle
from sphinxcontrib.bibtex.style.template import (
    join2,
    post_text,
    pre_text,
    reference,
    year,
)

sys.path.insert(0, str(Path("../src").resolve()))


# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    "sphinx.ext.autodoc",
    "sphinx.ext.autosectionlabel",
    "myst_parser",
    "rst2pdf.pdfbuilder",
    "sphinx_togglebutton",
    "sphinxarg.ext",
    "sphinx_copybutton",
    "sphinxcontrib.bibtex",
]

# override user-agent so that linkcheck works
# FIXME: disabled, doesn't currently have an effect
# user_agent= "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:121.0) Gecko/20100101 Firefox/121.0"

# autosectionlabel_prefix_document = True

# Add any paths that contain templates here, relative to this directory.
templates_path = ["_templates"]

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = ".rst"

# The master toctree document.
master_doc = "index"

# General information about the project.
# project = "PyPop: Python for Population Genomics"
project = "PyPop"
copyright = "2025 PyPop contributors"
uc_copyright = "Copyright Â© 2003-2009 Regents of the University of California"
gfdl_license_text = "Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.2 or any later version published by the Free Software Foundation; with no Invariant Sections no Front-Cover Texts and no Back-Cover Texts. A copy of the license is included in the License chapter."

author_list = [
    "Alexander K. Lancaster",
    "Mark P. Nelson",
    "Diogo Meyer",
    "Richard M. Single",
    "Owen D. Solberg",
]
author = "\\and ".join(author_list)
htmlauthor = ", ".join(author_list)

# enable author directives
show_authors = True

# figures
numfig = True

# override default text on toggle buttons (sphinx_togglebutton extension)
togglebutton_hint = "Click to show"
togglebutton_hint_hide = "Click to hide"

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.


# The full version, including alpha/beta/rc tags, don't normalize for documentation
full_release = get_version("..", normalize=True, version_scheme="post-release")
# The version without the .post or .dev variants
version = full_release.split(".post")[0]
release = version  # make the release and version be the same

guide_prefix = "pypop-guide-" + release  # include version in PDF filename
guide_name = "PyPop User Guide"
guide_subtitle = "User Guide for Python for Population Genomics"
guide_name_with_subtitle = f"{guide_name}: {guide_subtitle}"
guide_pdf_url = f"../{guide_prefix}.pdf"

# other substitutions
rst_epilog = """
.. |pkgname| replace:: {}
.. |guide_subtitle| replace:: **{}**
.. |htmlauthor| replace:: {}
.. |full_release| replace:: {}
.. |uc_copyright| replace:: {}
.. |copyright| replace:: {}
.. |gfdl_license_text| replace:: {}
.. |guide_pdf_url| replace:: {}
.. |guide_pdf_download_box| raw:: html

   <div style="text-align: right; font-size: 120%; margin-top: -1em; margin-bottom: 1em;">
   <a href="../{}.pdf">ðŸ“¥ PDF version</a>
   </div>
""".format(
    "``pypop-genomics``",
    guide_subtitle,
    htmlauthor,
    full_release,
    uc_copyright,
    copyright,
    gfdl_license_text,
    guide_pdf_url,
    guide_prefix,
)

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
# language = english

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = ["_build", "README.md", "reference", "Thumbs.db", ".DS_Store"]

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = "sphinx"

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = False

# -- Bibligraphy output using sphinxcontrib-bibtex --------------------------------------

bibtex_bibfiles = ["pypop.bib"]

## custom citation styles
## overwrite the default square brackets with round-brackets style
## allow for pre and post-text for :cite:year and :cite:yearpar
## remove space between citation and post-text, so that it supports
## output like: "Author (2024a, 2024b)"


def bracket_style() -> BracketStyle:
    return BracketStyle(
        left="(",
        right=")",
    )


@dataclass
class MyReferenceStyle(AuthorYearReferenceStyle, ExtraYearReferenceStyle):
    bracket_parenthetical: BracketStyle = field(default_factory=bracket_style)
    bracket_textual: BracketStyle = field(default_factory=bracket_style)
    bracket_author: BracketStyle = field(default_factory=bracket_style)
    bracket_label: BracketStyle = field(default_factory=bracket_style)
    bracket_year: BracketStyle = field(default_factory=bracket_style)

    # override Separator between citation and post-text to drop comma and space
    post_text_sep: str = ""

    def inner(self, role_name):
        # introspection to decide which parent class method to call
        if role_name in {"year", "yearpar"}:
            # append the pre and post text (original file does not do this)
            return join2(sep1=self.pre_text_sep, sep2=self.post_text_sep)[
                pre_text,
                reference[year],
                post_text,
            ]
        # call the inner method for AuthorYearReferenceStyle
        return super(AuthorYearReferenceStyle, self).inner(role_name)


sphinxcontrib.bibtex.plugin.register_plugin(
    "sphinxcontrib.bibtex.style.referencing", "author_year_round", MyReferenceStyle
)

bibtex_reference_style = "author_year_round"

## custom bibligraphy style

# FIXME: should move this to top - currently doesn't work
from pybtex.style.template import field, first_of, optional, sentence  # noqa: E402


class AlphaInitialsStyle(AlphaStyle):
    name = "alpha-initials"
    default_name_style = "lastfirst"  # put the lastname first
    default_label_style = "alpha"  # 'number' or 'alpha'
    default_sorting_style = "author_year_title"

    def __init__(self, **kwargs):
        super().__init__(abbreviate_names=True, **kwargs)  # abbreviate initials

    def format_web_refs(self, e):
        # try for DOI, PubMed or EPrint first, only include URL if not present
        return first_of[
            sentence[
                optional[self.format_eprint(e)],
                optional[self.format_pubmed(e)],
                optional[self.format_doi(e)],
            ],
            optional[
                self.format_url(e), optional[" (accessed on ", field("urldate"), ")"]
            ],
        ]


pybtex.plugin.register_plugin(
    "pybtex.style.formatting", "alpha-initials", AlphaInitialsStyle
)

bibtex_default_style = "alpha-initials"


# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
# html_theme = "piccolo_theme"
html_theme = "pydata_sphinx_theme"

html_short_title = "PyPop"

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
html_theme_options = {  # these are both piccolo theme-specific
    "show_nav_level": 3,
    "navigation_depth": 3,
    "collapse_navigation": False,
    "secondary_sidebar_items": {
        "**": [],  # "page-toc"
    },
    "navbar_align": "left",
    "github_url": "https://github.com/alexlancaster/pypop/",
    "announcement": 'PyPop 1.3.0 is released, including Python 3.14 wheels on PyPI<br/>See more on the <a href="http://pypop.org/">home page</a> for details<br/>',
    # "banner_text": 'PyPop 1.3.0 is released, including Python 3.14 wheels on PyPI<br/>See more on the <a href="http://pypop.org/">home page</a> for details<br/>',
    "logo": {
        # In a left-to-right context, screen readers will read the alt text
        # first, then the text, so this example will be read as "P-G-G-P-Y
        # (short pause) Home A pretty good geometry package"
        "alt_text": "PyPop - Home",
        "text": "PyPop",
        # "image_light": "../pypop-logo.png",
        # "image_dark": "../pypop-logo.png",
    },
}

html_logo = "../pypop-logo.png"

html_sidebars = {"index": [], "**": ["sidebar-nav-bs", "page-toc"]}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ["_static"]
html_css_files = ["custom.css"]

# put all files that should be root of the pypop.org/ webserver into this directory
# and they will be included in the build directory (and therefore on the website)
html_extra_path = ["html_root"]


# -- Options for LaTeX output ---------------------------------------------


# set size of code output in LaTeX backend
class CustomLatexFormatter(LatexFormatter):
    def __init__(self, **options):
        super().__init__(**options)
        self.verboptions = r"formatcom=\footnotesize"


PygmentsBridge.latex_formatter = CustomLatexFormatter

# latex_show_urls = 'inline'
latex_show_urls = "footnote"

# Copy logo so LaTeX can find it
latex_additional_files = [
    "../pypop-logo.png",
]

latex_logo = "../pypop-logo.png"

# need to declare a template for the LaTeX preamble for later substitution

my_latex_preamble_template = r"""\DeclareRobustCommand{\and}{%
\end{tabular}\kern-\tabcolsep\\\begin{tabular}[t]{c}%
}%
\setcounter{secnumdepth}{1}%

\usepackage{graphicx}
\graphicspath{{docs/_static/}{_static/}{./}}

\usepackage{pagenote}
\makepagenote
% \renewcommand*{\notesname}{End Notes}
\renewcommand*{\notedivision}{\subsubsection*{\notesname}}
\renewcommand*{\pagenotesubhead}[2]{}

\usepackage{environ}% http://ctan.org/pkg/environ

\newcommand{\OverwriteEnviron}[1]{%
  \expandafter\let\csname #1\endcsname\relax%
  \expandafter\let\csname end#1\endcsname\relax%
  \expandafter\let\csname env@#1@parse\endcsname\relax%
  \expandafter\let\csname env@#1@save@env\endcsname\relax%
  \expandafter\let\csname env@#1@process\endcsname\relax%
  \NewEnviron{#1}%
}

\usepackage{etoolbox}% http://ctan.org/pkg/etoolbox
\pretocmd{\chapter}{%
  % only print chapter endnotes if there is at least one footnote
  \ifnumcomp{\thepagenote}{>}{0}{
   \begingroup
   \scriptsize
   \linespread{0.5} %regulate line spacing
   \printnotes*
   \vfill
   \endgroup
  }{}
}{}{}

% override default title page to add subtitle
\makeatletter
\renewcommand{\sphinxmaketitle}{%
  \let\sphinxrestorepageanchorsetting\relax
  \ifHy@pageanchor\def\sphinxrestorepageanchorsetting{\Hy@pageanchortrue}\fi
  \hypersetup{pageanchor=false}% avoid duplicate destination warnings
  \begin{titlepage}%
    \let\footnotesize\small
    \let\footnoterule\relax
    \noindent\rule{\textwidth}{1pt}\par
      \begingroup % for PDF information dictionary
       \def\endgraf{ }\def\and{\& }%
       \pdfstringdefDisableCommands{\def\\{, }}% overwrite hyperref setup
       \hypersetup{pdfauthor={\@author}, pdftitle={\@title}}%
      \endgroup
    \vspace{3em}
    \makebox[\textwidth][c]{\scalebox{0.65}{\sphinxlogo}}
    \vspace{3em}
    \begin{flushright}%
      \py@HeaderFamily
      {\Huge \@title \par}
      {\Large SUBTITLE \par}
      {\itshape\LARGE \py@release\releaseinfo \par}
      \vfill
      {\LARGE
        \begin{tabular}[t]{c}
          \@author
        \end{tabular}\kern-\tabcolsep
        \par}
      \vfill\vfill
      {\large
       \@date \par
       \vfill
       \py@authoraddress \par
      }%
    \end{flushright}%\par
    \@thanks
  \end{titlepage}%
  \setcounter{footnote}{0}%
  \let\thanks\relax\let\maketitle\relax
  %\gdef\@thanks{}\gdef\@author{}\gdef\@title{}
  \clearpage
  \ifdefined\sphinxbackoftitlepage\sphinxbackoftitlepage\fi
  \if@openright\cleardoublepage\else\clearpage\fi
  \sphinxrestorepageanchorsetting
}"""

# replace the template with the right SUBTITLE
my_latex_preamble = my_latex_preamble_template.replace("SUBTITLE", guide_subtitle)

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',
    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',
    # make PDF shorter by allowing chapters to start immediately
    "extraclassoptions": "openany,oneside",
    # Additional stuff for the LaTeX preamble.
    #
    "preamble": my_latex_preamble,
    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
    "maketitle": rf"\newcommand\sphinxbackoftitlepage{{\sphinxstrong{{{guide_name_with_subtitle}}}\\ \\{uc_copyright}. \\Copyright Â© {copyright}. \\ \\{gfdl_license_text} \\ \\\emph{{Document revision}}: {full_release}}}\sphinxmaketitle",
    # margins
    "sphinxsetup": "hmargin=0.8in, vmargin={1in,0.9in}",
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).

latex_documents = [
    ("docs/index", guide_prefix + ".tex", guide_name, author, "manual"),
]
pdf_documents = [
    ("docs/index", guide_prefix, guide_name, author),
]

# override the default literalinclude directive
# this sets the tab width only in LaTeX mode to make sure tab stops stay aligned

# in HTML case, because we want to preserve the tabs for cut-and-paste, we use
# _static/custom.css to set tab-width


class MyLiteralInclude(LiteralInclude):
    def run(self):
        # FIXME: missing tags
        if "builder_latex" in tags.tags:  # noqa: F821
            self.options["tab-width"] = 15  # set default tab-width only in LaTeX mode
            print("LaTeX literalinclude options:", self.options)

        node = LiteralInclude.run(self)[0]  # run original directive
        return [node]


def substitute_toc_maxdepth(app, _docname, source):
    # determine the maxdepth for the builder
    maxdepth_value = 4 if app.builder.name == "html" else 3

    # modify the toctree directive by replacing maxdepth with value
    # replace the `|toc_maxdepth|` placeholder in the source content
    new_source = source[0].replace("|toc_maxdepth|", str(maxdepth_value))
    source[0] = new_source  # Update the source with the modified content


def setup(app):
    app.add_directive("literalinclude", MyLiteralInclude, override=True)
    app.connect("source-read", substitute_toc_maxdepth)
