name: Build PyPop

on:
  workflow_dispatch:  
  pull_request:
    paths-ignore:
      - '**.md'
      - '**.rst'
      - 'CITATION.cff'
      - '.zenodo.json'      
      - 'website/**'
      - '.github/workflows/documentation.yaml'
      - '.gitattributes'
  push:
    paths-ignore:
      - '**.md'
      - '**.rst'
      - 'CITATION.cff'
      - '.zenodo.json'      
      - 'website/**'
      - '.github/workflows/documentation.yaml'
      - '.gitattributes'      
  release: 
     types: 
      - published

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, macos-11, windows-2019]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build and test wheels
        uses: pypa/cibuildwheel@v2.16.0
        with:
          package-dir: .
          output-dir: wheelhouse
          config-file: "{package}/pyproject.toml"

      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz 

  upload_gh_release:
    name: Upload binary wheels and sdist to GH release page
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    # upload to gh on every tag starting with 'v'
    #if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    # alternatively, to publish when a GitHub Release is created, use the following rule:
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/download-artifact@v3
        with:
          # unpacks default artifact into dist/
          # if `name: artifact` is omitted, the action will create extra parent dir
          name: artifact
          path: dist
      - uses: softprops/action-gh-release@v1
        name: Uploading binaries to release page
        with:
          files: dist/*

  upload_test_pypi:
    name: Upload to Test_PyPI
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    environment: test_pypi
    permissions:
      id-token: write
    if: ${{ (github.ref == 'refs/heads/main') && (github.event_name == 'release' && github.event.action == 'published') }}
    steps:
      - uses: actions/download-artifact@v3
        with:
          # unpacks default artifact into dist/
          # if `name: artifact` is omitted, the action will create extra parent dir
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository_url: https://test.pypi.org/legacy/

  upload_pypi:
    name: Upload to PyPI
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      id-token: write
    if: ${{ (github.ref == 'refs/heads/main') && (github.event_name == 'release' && github.event.action == 'published') }}
    steps:
      - uses: actions/download-artifact@v3
        with:
          # unpacks default artifact into dist/
          # if `name: artifact` is omitted, the action will create extra parent dir
          name: artifact
          path: dist

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
  
  publish_zenodo:
    name: Publish to zenodo on production releases only
    needs: [build_sdist]  # eventually make this upload_pypi    
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published' && '!github.event.release.prerelease'
    steps:
       - name: Checkout the contents of your repository
         uses: actions/checkout@v4
       - name: Upsert the version in the metadata in .zenodo.json
         run: |
           echo "GITHUB_REF_NAME = $GITHUB_REF_NAME | GITHUB_REF = $GITHUB_REF | GITHUB_EVENT_PATH = $GITHUB_EVENT_PATH"
           echo "github.event.release.target_commitish = ${{ github.event.release.target_commitish }}"
           cp .zenodo.json .zenodo.orig.json
           echo "{\"version\": \"$GITHUB_REF_NAME\"}" | cat .zenodo.orig.json - | jq -s add > .zenodo.json
           rm .zenodo.orig.json
       - name: Upsert the version in the metadata in CITATION.cff
         run: |
           yq -i ".version = \"$GITHUB_REF_NAME\"" CITATION.cff
       - name: Push changes back to repo files
         run: |
           git fetch origin
           git config --global user.name ci
           git config --global user.email "username@users.noreply.github.com"
           git checkout -b $GITHUB_REF_NAME-with-upserting-changes
           git add .zenodo.json CITATION.cff
           git commit -m "Upserted version into CITATION.cff and into .zenodo.json"
           git checkout ${{ github.event.release.target_commitish }}
           git merge $GITHUB_REF_NAME-with-upserting-changes
           git push origin ${{ github.event.release.target_commitish }}
#           git tag -d $GITHUB_REF_NAME
#           git push --follow-tags origin :$GITHUB_REF
#           git tag $GITHUB_REF_NAME
#           git push origin --tags
       - name: Create a draft snapshot of your repository contents as a new
               version in test collection on Zenodo using metadata
               from repository file .zenodo.json
         env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
           # FIXME: use main one until sandbox is working
           #ZENODO_SANDBOX_ACCESS_TOKEN: ${{ secrets.ZENODO_SANDBOX_ACCESS_TOKEN }}
           ZENODO_ACCESS_TOKEN: ${{ secrets.ZENODO_ACCESS_TOKEN }}
         uses: zenodraft/action@0.10.0
         with:
           collection: 8387711
           metadata: .zenodo.json
           publish: false
           # FIXME: use main one until sandbox working
           # sandbox: true
           sandbox: false
           compression: tar.gz
           upsert-doi: true
           upsert-location: doi
           verbose: true
      # steps:
      #   # This step is not needed at the moment but might decide to add on more steps in the future
      #   - name: Set up Node.js
      #     uses: actions/setup-node@v3
      #     with:
      #       node-version: 16
      #   - name: Upload to Zenodo
      #     id: release
      #     uses: alexlancaster/upload-to-zenodo@main
      #     with:
      #       github_token: ${{ secrets.GITHUB_TOKEN }}
      #       zenodo_token: ${{ secrets.ZENODO_SANDBOX_ACCESS_TOKEN }}
      #       zenodo_deposition_id: 1243453
      #       zenodo_publish: true
      #       zenodo_sandbox: true
      #       commit_message: 'chore: update ${file_name} for Zenodo release'
      #       update_metadata_files: true
      #       codemeta_json: false
      #       citation_cff: true
      #       zenodo_json: true

      #   # Get the doi from the `release` step
      #   - name: Get the output doi
      #     run: echo "The released doi was ${{ steps.release.outputs.doi }}"
