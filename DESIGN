**Beginnings of a class library for parsing population genetics data files.**

*Lasted updated: $Date$ by $Author$.*

- 'ParseFile' is a base class which has most of the common functionality
for reading files.

- 'ParseGenotype' is a subclass of 'ParseFile' that deals with files
that consist specifically of data with individual genotyped for one or
more loci.

- 'ParseAlleleCount' is another subclass of 'ParseFile' that deals
with files consisting of allele counts across a whole population.

- 'HardyWeinberg' is a class that calculates Hardy-Weinberg
statistics given genotype data for a single locus.

- 'Haplo' is an abstract base class for estimating haplotypes given
genotype data.

- 'HaploArlequin' is a subclass of 'Haplo' that uses Arlequin for
estimation of haplotypes.

- 'ArlequinBatch' the underlying class that `wraps' the functionality
of the "Arlequin":http://lgb.unige.ch/arlequin/ program to estimate
haplotypes.  This class, in turn, supplies 'HaploArlequin' with required
information.

- 'Homozygosity' Calculates homozygosity statistics for a given locus,
calculates the observed homozygosity and returns the approximate
expected homozygosity statistics taken from previous simulation runs.

Both file formats are assumed to have a population header information
with, consisting of a line of column headers (population metadata)
followed by a line with the actual data, followed by the column
headers for the samples (sample metadata) followed by the sample data
itself (either individuals in the genotyped case, or alleles in the
allele count case).


**TODO**

- Implement 'ParseAllelecount'.

- Finish cleaning up 'HardyWeinberg'.

- Implement a 'PopGenStats' module?  Move some 'population-level'
  statistics into this module.

- Rationalize naming conventions.


**NOTE**: When editing this 'README' file, it will help to adhere to
the "structured text
conventions":http://www.python.org/sigs/doc-sig/stext.html since
Happydoc uses this information to format output documentation
(including HTML) nicely.
