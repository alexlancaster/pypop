<?xml version="1.0"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN" 
   "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<?PSGML nofill programlisting screen literallayout?>

<article id="guide-usage">
 <articleinfo>
  <title>Getting started with <application>PyPop</application></title>
  <authorgroup>
   <author>
    <firstname>Mark</firstname>
    <othername>P.</othername>
    <surname>Nelson</surname>
   </author>
   <author>
    <firstname>Alex</firstname>
    <surname>Lancaster</surname>
   </author>
  </authorgroup>
  <pubdate>Last updated: $Date$ by $Author$</pubdate>
 </articleinfo>

 <sidebar>
  <para>To learn how to install <application>PyPop</application>,
   please consult the file <filename>INSTALL</filename>.   For a list
   of recent user-visible changes, consult the file
   <filename>NEWS</filename>.  The list of authors of
   <application>PyPop</application> is found in
   <filename>AUTHORS</filename>.  PyPop is distributed under the terms
   of the GNU General Public License <ulink
    url="http://www.gnu.org/licenses/gpl.html">http://www.gnu.org/licenses/gpl.html</ulink>, 
   please consult the file <filename>COPYING</filename> for terms and
   conditions.</para>
 </sidebar>

 <section id="guide-usage-intro">
  <title>Introduction</title>

  <para>You may use <application>PyPop</application> to analyze many
   different kinds of data, including allele-level genotypes (as in
   <xref linkend="data-minimal-noheader-noids"/>) and allele-level
   frequencies (as in <xref linkend="data-allelecount"/>) from the HLA
   region (as well as regions from other chromosomes), microsatellite
   data, SNPs, and nucleotide and amino acid sequence data.</para>

  <para>There are two ways to run <application>PyPop</application>:
   <itemizedlist>
    <listitem>
     <para><firstterm>interactive</firstterm> mode (where the program
      will prompt you to directly type the input it needs); and</para>
    </listitem>
    <listitem>
     <para><firstterm>batch</firstterm>  mode  (where you supply all
      the command line options the program needs).</para>
    </listitem>
   </itemizedlist> For the most straightforward application of
   <application>PyPop</application>, where you wish to analyze a
   single population, the interactive mode is the simplest to use. We
   will describe this mode first, then describe batch mode.</para>

  <section>
   <title>Interactive mode</title>

   <para>To run <application>PyPop</application>, click the
    <filename>pypop.bat</filename> file (Windows) or type
    <userinput>./pypop</userinput> at the command prompt
    (GNU/Linux).  You should see something like the following output
    (this is also described in detail in the instructions
    in the installation guide):</para>

   <xi:include href="install-screen.xml#xpointer(/section/screen)" xmlns:xi="http://www.w3.org/2001/XInclude"/>

   <para>You should substitute the names of your own configuration
    (e.g., <filename>config.ini</filename>) and population file (e.g.,
    <filename>Guatemalan.pop</filename>) for
    <filename>sample.ini</filename> and <filename>sample.pop</filename>.
    The formats for these files are described in <xref
     linkend="guide-usage-datafile"/> and <xref
     linkend="guide-usage-configfile"/>, below.
   </para>

  </section>

  <section>
   <title>Batch mode</title>

   <para>To run <application>PyPop</application> in batch mode, you
    can start <application>PyPop</application> from the command line
    (in Windows: open a DOS shell, GNU/Linux: open a terminal window),
    change to the directory where you unpacked
    <application>PyPop</application> and type</para>

   <screen><command>pypop-batch</command> <filename>Guatemalan.pop</filename></screen>

   <note>
    <para>If your system administrator has installed
     <application>PyPop</application> the name of the script may be
     renamed to something different.</para>
   </note>

   <para>Batch mode assumes two things: that you have a file called
    <filename>config.ini</filename> in your current folder and that
    you also have your population file also in the current folder. You
    can specify a particular configuration file for
    <application>PyPop</application> to use, by supplying the
    <option>-c</option> option as follows:</para>

   <screen><command>pypop-batch</command> <option>-c</option> <filename>newconfig.ini</filename> <filename>Guatemalan.pop</filename></screen>

   <para>You may also redirect the output to a different directory
    (which must already exist) by using the <option>-o</option>
    option:</para>

   <screen><command>pypop-batch</command> <option>-c</option> <filename>newconfig.ini</filename> <option>-o altdir</option> <filename>Guatemalan.pop</filename></screen>

   <para>For a full list of options supported by
    <application>PyPop</application>,  type <userinput>pypop-batch
     --help</userinput>.   You should receive a screen resembling the
    following:</para>

   <screen>Usage: pypop [OPTION] INPUTFILE
Process and run population genetics statistics on an INPUTFILE.
Expects to find a configuration file called 'config.ini' in the
current directory or in /usr/share/PyPop/config.ini.

  -l, --use-libxslt    filter XML via XSLT using libxslt (default)
  -s, --use-4suite     filter XML via XSLT using 4Suite
  -x, --xsl=FILE       use XSLT translation file FILE
  -h, --help           show this message
  -c, --config=FILE    select alternative config file
  -d, --debug          enable debugging output (overrides config file setting)
  -i, --interactive    run in interactive mode, prompting user for file names
  -g, --gui            run GUI (currently disabled)
  -o, --outputdir=DIR  put output in directory DIR
  -V, --version        print version of PyPop
   
    INPUTFILE   input text file</screen>

   <warning>
    <para>Documentation for these options is currently
     incomplete.</para>
   </warning>

  </section>

  <section>
   <title>What happens when you run <application>PyPop</application>?</title>

   <para>The most common types of analysis will involve the editing of
    your <filename>config.ini</filename> file to suit your data (see
    <xref
     linkend="guide-usage-configfile"/>) followed by the selection of
    either the interactive or batch mode described above. If your
    input configuration file is
    <filename><replaceable>configfilename</replaceable></filename> and
    your population file name is
    <filename><replaceable>popfilename</replaceable>.txt</filename>
    the initial output will be generated quickly, but your the
    <application>PyPop</application> execution will not be finished
    until the text output file named
    <replaceable>popfilename</replaceable>-out.txt has been created. A
    successful run will produce two output files:
    <filename><replaceable>popfilename</replaceable>-out.xml</filename>, 
    <filename><replaceable>popfilename</replaceable>-out.txt</filename>. 
    A third output file will be created if your data is HLA and you
    are using the Anthony Nolan HLA filter option to check your input
    for valid/known HLA alleles:
    <filename><replaceable>popfilename</replaceable>-filter.xml</filename>).</para>

   <para>A typical <application>PyPop</application> run might take
    anywhere from a few of minutes to a few hours, depending on how
    large your data set is and who else is using the system at the
    same time.  Note that performing the
    <literal>allPairwiseLDWithPermu</literal> test may take several
    <emphasis role="bold">days</emphasis> if you have highly
    polymorphic loci in your data set.</para>

  </section>

 </section>

 <section id="guide-usage-datafile">
  <title>The data file</title>

  <section>
   <title>Sample files</title>

   <para>Data can be input either as genotypes, or in an allele count
    format, depending on the format of your data.</para> 

   <para>As you will see in the following examples, population files
    begin with header information.  In the simplest case, the first
    line contains the column headers for the genotype, allele count,
    or, sequence information from the population.  If the file
    contains a population data-block, then the first line consists of
    headers identifying the data on the second line, and the third
    line contains the column headers for the genotype or allele count
    information. </para>

   <para>Note that for genotype data, each locus corresponds to two
    columns in the population file.  The locus name must repeated,
    with a suffix such as <literal>_1</literal>, <literal>_2</literal>
    (the default)  or <literal>_a</literal>, <literal>_b</literal> and
    must match the format defined in the
    <filename>config.ini</filename> (see <xref
     linkend="validSampleFields"/>).  Although
    <application>PyPop</application> needs this distinction to be
    made, phase is NOT assumed or inferred, and if present, is not
    recognized.</para>


   <example id="data-minimal-noheader-noids">
    <title>Multi-locus allele-level genotype data</title>

  <programlisting>a_1   a_2   c_1   c_2   b_1   b_2
****  ****  0102  02025 1301  18012 
0101  0201  0307  0605  1401  39021 
0210  03012 0712  0102  1520  1301  
0101  0218  0804  1202  35091 4005  
2501  0201  1507  0307  51013 1401  
0210  3204  1801  0102  78021 1301  
03012 3204  1507  0605  51013 39021 
  </programlisting>

   <para>This is an example of the simplest kind of data file.</para>

   </example>

   <example id="data-minimal-noheader">
    <title>Multi-locus allele-level HLA genotype data with sample information</title>

  <programlisting>populat    id        a_1   a_2   c_1   c_2   b_1   b_2
UchiTelle  UT900-23  ****  ****  0102  02025 1301  18012 
UchiTelle  UT900-24  0101  0201  0307  0605  1401  39021 
UchiTelle  UT900-25  0210  03012 0712  0102  1520  1301  
UchiTelle  UT900-26  0101  0218  0804  1202  35091 4005  
UchiTelle  UT910-01  2501  0201  1507  0307  51013 1401  
UchiTelle  UT910-02  0210  3204  1801  0102  78021 1301  
UchiTelle  UT910-03  03012 3204  1507  0605  51013 39021 
  </programlisting>
   </example>

   <para>This example shows a data file which has non-allele data in
    some columns, here we have population (<literal>populat</literal>)
    and  sample identifiers (<literal>id</literal>).</para>

   <example id="data-hla">
    <title>Multi-locus allele-level HLA genotype data with sample and header information</title>

  <programlisting><![CDATA[labcode method              ethnic  contin  collect        latit           longit          
USAFEL  12th Workshop SSOP  Telle   NW Asia Targen Village 41 deg 12 min N 94 deg 7 min E  
populat     id         a_1     a_2     c_1     c_2     b_1     b_2     
UchiTelle   UT900-23   ****    ****    0102    02025   1301    18012   
UchiTelle   UT900-24   0101    0201    0307    0605    1401    39021   
UchiTelle   UT900-25   0210    03012   0712    0102    1520    1301    
UchiTelle   UT900-26   0101    0218    0804    1202    35091   4005    
UchiTelle   UT910-01   2501    0201    1507    0307    51013   1401    
UchiTelle   UT910-02   0210    3204    1801    0102    78021   1301    
UchiTelle   UT910-03   03012   3204    1507    0605    51013   39021   
]]></programlisting>

   <para>This is an example of a data file which is identical to <xref
     linkend="data-minimal-noheader"/>, but which includes population
    level information.</para>

   </example>

   <example id="data-hla-microsat">
    <title>Multi-locus allele-level HLA genotype and microsatellite genotype data with header information</title>

  <programlisting>labcode ethnic  complex
USAFEL  ****    0
populat    id      drb1_1  drb1_2  dqb1_1  dqb1_2  d6s2222_1  d6s2222_2  
UchiTelle  HJK_2   01      0301    0201     0501    249        249        
UchiTelle  HJK_1   0301    0301    0201     0201    249        249        
UchiTelle  HJK_3   01      0301    0201     0501    249        249        
UchiTelle  HJK_4   01      0301    0201     0501    249        249        
UchiTelle  MYU_2   02      0401    0302     0602    247        249        
UchiTelle  MYU_1   0301    0301    0201     0201    247        249        
UchiTelle  MYU_3   0301    0401    0201     0302    249        249        
UchiTelle  MYU_4   0301    0401    0201     0302    247        249</programlisting>

    <para>This example  mixes different kinds of data: HLA allele data
     (from DRB1 and DQB1 loci) with microsatellite data (locus
     D6S2222).</para>

   </example>

   <example id="data-nucleotide">
    <title>Sequence genotype data with header information</title>

  <programlisting>labcode file                                                
BLOGGS  C_New
popName ID       TGFB1cdn10(1) TGFB1cdn10(2) TGFBhapl(1) TGFBhapl(2) 
Urboro  XQ-1     C             T             CG          TG     
Urboro  XQ-2     C             C             CG          CG     
Urboro  XQ-5     C             T             CG          TG     
Urboro  XQ-21    C             T             CG          TG     
Urboro  XQ-7     C             T             CG          TG     
Urboro  XQ-20    C             T             CG          TG     
Urboro  XQ-6     T             T             TG          TG     
Urboro  XQ-8     C             T             CG          TG     
Urboro  XQ-9     T             T             TG          TG     
Urboro  XQ-10    C             T             CG          TG     
  </programlisting>

  <para>This example includes nucleotide sequence data: the TGFB1CDN10
     locus consists of one nucleotide, the TGFBhapl locus is actually
     haplotype data, but <application>PyPop</application> simply
     treats each combination as a separate "allele" for subsequent
     analysis.</para>
    
   </example>

   <example id="data-allelecount">
    <title>Allele count data</title>

  <programlisting>populat    method  ethnic     country    latit   longit
UchiTelle  PCR-SSO Klingon    QZ         052.81N 100.25E
dqa1  count
0101  31
0102  37
0103  17
0201  21
0301  32
0401  9
0501  35
  </programlisting>

   <para><application>PyPop</application> can also process allele
     count data.  However, you cannot mix allele count data and
     genotype data together in the one file</para>

   </example>

   <para>These population files are plain text files, such as you
    might save out of the <application>Notepad</application>
    application on Windows (or <application>Emacs</application>).  The
    columns are all tab-delimited, so you can include spaces in your
    labels.  If you have your data in a spreadsheet application, such
    as <application>Excel</application> or
    <application>OpenOffice.org</application>, export the file as
    tab-delimited text, in order to use it as
    <application>PyPop</application> data file.</para>

  </section>
  
  <section>
   <title>Missing data</title>
   
   <para>Untyped or missing data may be represented in a variety of
    ways.  The default value for untyped or missing data is a series
    of four asterisks (<literal>****</literal>) as specified by the
    <filename>config.ini</filename>.  You may not "represent" untyped
    data by leaving a column blank, nor may you represent a homozygote
    by leaving the second column blank.  All cells for which you have
    data must include data, and all cells for which you do not have
    data must also be filled in, using a missing data value.</para>
   
   <para>For individuals who were not typed at all loci, the data in
    loci for which they are typed will be used on all single-locus
    analyses for that individual and locus, so that you see the value
    of the number of individuals (<varname>n</varname>) vary from
    locus to locus in the output.  These individuals' data will also
    be used for multi-locus analyses.  Only the loci that contain no
    missing data will be included in any multi-locus analysis.</para>
   
   <para>If an individual is only partially typed at a locus, it will
    be treated as if it were completely untyped, and data for that
    individual for that locus will be dropped from ALL
    analyses.</para>

   <warning>
    <title>Current limitations of <application>PyPop</application></title>
   
   <itemizedlist>
    
    <listitem>
     <para>Do not leave trailing blank lines at the end of your data
       file, as this currently causes <application>PyPop</application>
       to terminate with an error message that takes experience to
       diagnose.</para></listitem>
    
    <listitem>
     <para>For haplotype estimation and linkage disequilibrium
       calculations (i.e., the emhaplofreq part of the program) you
       are currently restricted to a maximum of seven loci per
       haplotype request.  For haplotype estimation there is a limit
       of 1023 for the number of individuals (<varname>n</varname>)<footnote>
	<para>These hardcoded numbers can be changed if you obtain the
	 source code yourself and change the appropriate
	 <systemitem>#define</systemitem> <filename
	  class="headerfile"> emhaplofreq.h</filename> and recompile
	 the program.</para></footnote></para></listitem>
   </itemizedlist>
   </warning>
  </section>
 </section>

 <section id="guide-usage-configfile">
  <title>The configuration file</title>
  
  <para>The sets of population genetic analyses that are run on your
   population data file and the manner in which the data file is
   interpreted by <application>PyPop</application>  is controlled by a
   configuration file, the default name for which is
   <filename>config.ini</filename>. This is another plain text file
   consisting of <firstterm>comments</firstterm> (which are lines that
   start with a semi-colon), <firstterm>sections</firstterm> (which
   are lines with labels in square brackets), and
   <firstterm>options</firstterm> (which are lines specifying settings
   relevant to that section in the
   <literal><option>option</option>=<replaceable>value</replaceable></literal> 
   format.</para>

  <section id="config-minimal">
   <title>A minimal configuration file</title>

   <para>Here we present a minimal <filename>.ini</filename> file
    corresponding to <xref
     linkend="data-minimal-noheader-noids"/> A  section by section
    review of this file follows.  (Note comment lines have been
    omitted in the above example for clarity).  A description of  more
    advanced options is contained in <xref
     linkend="config-advanced"/>.</para>

  <example id="config-minimal-example">
   <title>Minimal <filename>config.ini</filename> file</title>
  <programlisting>
[General]                  <co id="general"/>
debug=0			   
			   
[ParseGenotypeFile]        <co id="parsegenotype"/>
untypedAllele=****         
alleleDesignator=*         
validSampleFields=*a_1     
 *a_2			   
 *c_1			   
 *c_2			   
 *b_1			   
 *b_2			   
			   
[HardyWeinberg]            <co id="hardyweinberg"/>
lumpBelow=5                

<!--
[HardyWeinbergGuoThompson] <co id="hardyweinbergGuoThompson"/>
dememorizationSteps=2000
samplingNum=1000
samplingSize=1000
-->
[HomozygosityEWSlatkinExact] <co id="homozygosityEWSlatkinExact"/>
numReplicates=10000

[Emhaplofreq]              <co id="emhaplofreq"/>
allPairwiseLD=1
allPairwiseLDWithPermu=0
;;numPermuInitCond=5</programlisting>
  </example>
   
  <calloutlist>
    <title>Configuration file sections</title>

    <callout arearefs="general">
     
     <para role="strong"><literal>[General]</literal></para>
     
     <para>This section contains variables that control the
      overall behavior of <application>PyPop</application>.</para>
     
     <itemizedlist>
     <listitem>
      <formalpara>
      <title><literal>debug=0</literal></title>
       <para>This setting is for debugging.  Setting it to 1 will set
	 off a large amount of output of no interest to the general
	 user.  It should not be used unless you are running into
	 trouble and need to communicate with the
	 <application>PyPop</application> developers about the
	 problems.</para>
      </formalpara>
     </listitem>
    </itemizedlist>
   </callout>
   <callout arearefs="parsegenotype">

     <para role="strong">Specifying data formats</para>

     <para>There are two possible formats:
      <literal>[ParseGenotypeFile]</literal> and
      <literal>[ParseAlleleCountFile]</literal></para>

     <formalpara>
      <title><literal>[ParseGenotypeFile]</literal></title>
      <para>If your data is genotype data, you will want a section
       labeled:  <literal>[ParseGenotypeFile]</literal>.</para>
     </formalpara>

    <itemizedlist>
     <listitem>
      <formalpara>
       <title><literal>alleleDesignator</literal></title>
       <para>This option is used to tell
	 <application>PyPop</application> what is allele data and what
	 isn't. You must use this symbol in <link
	  linkend="validSampleFields"><literal>validSampleFields</literal> 
	 </link> option.  The default is <literal>*</literal>.  In
	 general, you won't need to change it.  <emphasis
	  role="bold">[Default:
	  <literal>*</literal>]</emphasis></para>
      </formalpara>
     </listitem>
     <listitem>
      <formalpara>
       <title><literal>untypedAllele</literal></title>
       
       <para>This option is used to tell
	<application>PyPop</application> what symbol you have used
	in your data files to represent untyped or unknown data
	fields.  These fields MAY NOT BE LEFT BLANK.  You must use
	something consistent that cannot be confused with real data
	 here.  <emphasis role="bold">[Default: <literal>****</literal>]</emphasis></para>
      </formalpara>
     </listitem>
     
     <listitem>
      <formalpara id="validSampleFields">
	<title><literal>validSampleFields</literal></title>
       
	<para>This option should contain the names of the loci
	 immediately preceding your genotype data  (if it has three
	 header lines, this information will be on the third line,
	 otherwise it will be the first line of the file). The names
	 of all your loci, preceded by the character designated in the
	 <literal>alleleDesignator</literal> option above, must be
	 present in the block that begins with this line. <emphasis
	  role="bold">[There is no default, this option must always be
	  present]</emphasis>  Here is an example,</para>
      </formalpara>
      
      <programlisting>validSampleFields=*a_1
 *a_2
 *c_1
 *c_2
 *b_1
 *b_2
</programlisting>

     </listitem>
    </itemizedlist>
    
    <formalpara>
     <title><literal>[ParseAlleleCountFile]</literal></title>

      <para>If your data is not genotype data, but rather, data of the
       allele-name count format, then you will want to use the
       <literal>[ParseAlleleCountFile]</literal> section INSTEAD of
       the <literal>[ParseGenotypeFile]</literal> section.  The
       <literal>alleleDesignator</literal> and
       <literal>untypedAllele</literal> options work identically to
       that described for
       <literal>[ParseGenotypeFile]</literal>.</para>
    </formalpara>

    <itemizedlist>
     <listitem>
      <formalpara>
       <title><literal>validSampleFields=</literal></title>

       <para>This option should contain a colon-separated list of the
	 loci that will be in the data files you intend to analyze, so
	 that you don't have to change the <filename>.ini</filename>
	 file when running over a collection of data files containing
	 different loci. e.g.,</para>
      </formalpara>

   <programlisting>validSampleFields=A:B:C:DQA1:DQB1:DRB1:DPB1:DPA1
 count</programlisting>

     </listitem>
    </itemizedlist>
   </callout>

   <callout arearefs="hardyweinberg">

     <para role="strong"><literal>[HardyWeinberg]</literal></para>

      <para>Hardy-Weinberg analysis is enabled by the presence of
       this section.</para>
      
      <itemizedlist>
       <listitem>
	<formalpara>
	 <title><literal>lumpBelow</literal></title>
	 
	 <para>This option value represents a cut-off value.  Alleles
	 with an expected value equal to or less than
	 <literal>lumpBelow</literal> will be lumped together into a
	 single category for the purpose of calculating the degrees of
	 freedom and overall <varname>p</varname>-value for the
	 chi-squared Hardy-Weinberg test.</para>
	</formalpara>
       </listitem>
      </itemizedlist>

    </callout>

   <callout arearefs="homozygosityEWSlatkinExact">

    <para role="strong">
      <literal>[HomozygosityEWSlatkinExact]</literal></para>
     
     <para>The presence of this section enables Slatkin's <citation
       role="citeyearpar">Slatkin:1994</citation> implementation of the
      Ewens-Watterson exact test of neutrality.
     </para>

    <itemizedlist>
     <listitem>
      <formalpara>
       <title><literal>numReplicates</literal></title>

       <para>These values, provided as defaults, have proved to be
	 optimal for us.  There is no reason to change them unless you
	 are particularly curious. If you have a problem when you
	 change them you <emphasis role="bold">must</emphasis> also
	 let us know.</para>
      </formalpara>
     </listitem>
    </itemizedlist>
   </callout>

   <callout arearefs="emhaplofreq">

     <para role="strong"><literal>[Emhaplofreq]</literal></para>

     <para>The presence of this section enables haplotype estimation
      and calculation of linkage disequilibrium (LD) measures.</para>


    <itemizedlist>
     <listitem>
      <formalpara>
       <title><literal>lociToEstHaplo</literal></title>

       <para>In this option you can list the multi-locus haplotypes
	 for which you wish the program to estimate and to calculate
	 the LD. It should be a comma-separated list of colon-joined
	 loci. e.g.,</para>
      </formalpara>
      <programlisting>lociToEstHaplo=a:b:drb1,a:b:c,drb1:dqa1:dpb1,drb1:dqb1:dpb1</programlisting>
     </listitem>

     <listitem>
      <formalpara>
       <title><literal>allPairwiseLD</literal></title>

       <para>Set this to <literal>1</literal> (one) if you want the
	 program to calculate all pairwise LD for your data, otherwise
	 set this to <literal>0</literal> (zero).</para>
      </formalpara>
     </listitem>

      <listitem>
      <formalpara>
	<title><literal>allPairwiseLDWithPermu</literal></title>
   
	<para>Set this to a positive integer greater than 1 if you
	 need to determine the significance of the pairwise LD
	 measures in the previous section.  The number you use is the
	 number of permutations that will be run to ascertain the
	 significance (this should be at least 1000 or greater). (Note
	 this is done via permutation testing performed after the
	 pairwise LD test for all pairs of loci. Note also that this
	 test can take <emphasis>DAYS</emphasis> if your data is
	 highly polymorphic.)</para>
      </formalpara>
     </listitem>

      <listitem>
      <formalpara>
	<title><literal>numPermuInitCond</literal></title>
   
	<para>Set this to change the number of initial conditions used
	 per permutation.   The default is 5 (<emphasis>Note: this
	  parameter is only used if
	  <literal>allPairwiseLDWithPermu</literal> is set and
	  nonzero</emphasis>).</para>
      </formalpara>
     </listitem>

    </itemizedlist>
   </callout>
  </calloutlist>
  </section>

  <section id="config-advanced">
   <title>Advanced options</title>

   <para>The following section describes additional options to
    previously described sections.   Most of the time these options
    can be omitted and <application>PyPop</application> will choose
    defaults, however these advanced options do offer greater control
    over the application. In particular, customization will be
    required for data that has sample identifiers as in <xref
     linkend="data-minimal-noheader"/> or header data block as in
    <xref
     linkend="data-hla"/> and both
    <literal>validSampleFields</literal> (described above) and
    <literal>validPopFields</literal> (described below) will need to
    be modified.
   </para>

   <para>It also describes two extra sections related to using
    <application>PyPop</application> in conjunction with
    <application>Arlequin</application>: <literal>[Arlequin]</literal>
    and <literal>[HardyWeinbergGuoThompsonArlequin]</literal>.</para>
   
   <bridgehead><literal>[General]</literal> advanced
    options</bridgehead>
   
   <itemizedlist>
    <listitem>
     <formalpara>
      <title><literal>txtOutFilename</literal> and
       <literal>xmlOutFilename</literal></title>
      
      <para>If you wish to specify a particular name for the output
       file, which you want to remain identical over several runs, you
       can set these two items to particular values. The default is to
       have the program select the output filename, which can be
       controlled by the next variable.  <emphasis
	role="bold">[Default: not used]</emphasis></para>
      
     </formalpara>
    </listitem>
    
    <listitem>
     <formalpara>
      <title><literal>outFilePrefixType</literal> </title>
      
      <para>This option can either be omitted entirely (in which case
       the default will be <literal>filename</literal>) or be set in
       several ways.  The default is set as
       <literal>filename</literal>, which will result in three output
       files named
       <filename><replaceable>original-filename-minus-suffix</replaceable>-out.xml</filename>, 
       <filename><replaceable>original-filename-minus-suffix</replaceable>-out.txt</filename>, 
       and
       <filename><replaceable>original-filename-minus-suffix</replaceable>-filter.xml</filename>. 
       <emphasis role="bold">[Default:
	<literal>filename</literal>]</emphasis></para>
     </formalpara>
     
     <para>If you set the value to <literal>date</literal> instead of
      filename, you'll get the date incorporated in the filename as
      follows:
      <filename><replaceable>original-filename-minus-suffix</replaceable>-YYYY-nn-dd-HH-MM-SS-out.{xml,txt}</filename>. 
      e.g., <filename>USAFEL-UchiTelle-2003-09-21-01-29-35-out.xml</filename>
       (where Y, n, d, H, M, S refer to year, month, day, hour, minute
       and second, respectively).</para>
    </listitem>
    
    <listitem>
     <formalpara>
      <title><literal>xslFilename</literal></title>
      
      <para>This option specifies where to find the XSLT file to use
       for transforming <application>PyPop</application>'s xml output
       into human-readable form.  Most users will not normally need to
       set this option, and the default is the system-installed
       <filename>text.xsl</filename> file.</para>
     </formalpara>
    </listitem>
   </itemizedlist>

   <bridgehead><literal>[ParseGenotypeFile]</literal> advanced
    options</bridgehead>

   <itemizedlist>
    <listitem>
     <formalpara>
      <title><literal>fieldPairDesignator</literal></title>
      
      <para>This option allows you to override the coding for the
       headers for each pair of alleles at each locus; it must match
       the entry in the config file under
       <literal>validSampleFields</literal> and the entries in your
       population data file. If you want to use something other than
       <literal>_1</literal> and <literal>_2</literal>, change this
       option, for instance, to use letters and parentheses, change it
       as follows: <literal>fieldPairDesignator=(a):(b)</literal>
       <emphasis role="bold">[Default:
	<literal>_1:_2</literal>]</emphasis></para>
     </formalpara>
    </listitem>
    
    <listitem>
     <formalpara>
      <title><literal>popNameDesignator</literal></title>
      
      <para>There is a special designator to mark the population name
       field, which is usually the first field in the data block.
       <emphasis role="bold">[Default:
	<literal>+</literal>]</emphasis></para>
     </formalpara>
     
     <para>If you are analyzing data that contains a population name
      for each sample, then the first entry in your
      <literal>validSampleFields</literal> section should have a
      prefixed +, as below:</para>

     <programlisting>validSampleFields=+populat
 *a_1
 *a_2
 ...</programlisting>

    </listitem>

    <listitem>
     <formalpara>
      <title><literal>validPopFields</literal></title>
      
      <para>If you are analyzing data with an initial two line
       population header block information as in <xref
	linkend="data-hla"/>, then you will need to set this option.
       It should contain the field names in the first line of the
       three lines of header information of your file, if it has
       these.   <emphasis role="bold">[Default: required when
	population data-block in data file]</emphasis>, e.g.:</para>
     </formalpara>

     <programlisting>validPopFields=labcode
 method
 ethnic
 country
 latit
 longit</programlisting>

    </listitem>
   </itemizedlist>

   <bridgehead><literal>[Emhaplofreq]</literal> advanced
    options</bridgehead>

   <itemizedlist>
    <listitem>
     <formalpara>
      <title><literal>permutationPrintFlag</literal></title>
      
      <para>Determines whether the likelihood ratio for each
       permutation will be logged to the XML output file, this is
       disabled by default.  <emphasis role="bold">[Default:
	<literal>0</literal> (OFF)]</emphasis>.</para>
     </formalpara>

     <warning>
      <para>If this is enabled it can <emphasis>drastically</emphasis>
       increase the size of the output XML file on the order of the
       product of the number of possible pairwise comparisons and
       permutations. Machines with lower RAM and disk space may have
       difficulty coping with this. </para>
     </warning>
    </listitem>
   </itemizedlist>


   <bridgehead><literal>[Arlequin]</literal> extra
    section</bridgehead>

   
   <para>This section sets characteristics of the
    <application>Arlequin</application> application if it has been
    installed (it must be installed separately from
    <application>PyPop</application> as we cannot distribute it). The
    options in this section are only used when a test requiring
    <application>Arlequin</application>, such as it's implementation
    of Guo and Thompson's <citation
     role="citeyearpar">Guo:Thompson:1992</citation> Hardy-Weinberg
    exact test is invoked (see below).</para>
      
   <itemizedlist>
    <listitem>
     <formalpara>
      <title><literal>arlequinExec</literal></title>
      
      <para>This option specifies where to find the
       <application>Arlequin</application> executable on your system.
       The default assumes it is on your system path. <emphasis
	role="bold">[Default:
	<literal>arlecore.exe</literal>]</emphasis></para>
     </formalpara>
    </listitem>
   </itemizedlist>
   
   <bridgehead><literal>[HardyWeinbergGuoThompsonArlequin]</literal>
    extra section</bridgehead>
     
   <para>When this section is present, Arlequin's implementation of
    the Hardy-Weinberg exact test is run, using a Monte-Carlo Markov
    Chain implementation.  By default this section is not
    enabled.</para>

    <itemizedlist>
     <listitem>
      <formalpara>
       <title><literal>markovChainStepsHW</literal></title>
       <para>Length of steps in the Markov chain <emphasis
	 role="bold">[Default: 2500000]</emphasis>.</para>
      </formalpara>
     </listitem>
     <listitem>
      <formalpara>
       <title><literal>markovChainDememorisationStepsHW</literal></title>
       <para>Number of steps of to <quote>burn-in</quote> the Markov
	chain before statistics are collected.<emphasis
	 role="bold">[Default: 5000]</emphasis></para>
      </formalpara>
     </listitem>
    </itemizedlist>

   <para>The default values for options described above have proved
    to be optimal for us and if the options are not provided these
    defaults will be used.  If you change the values and have
    problems, please let us <emphasis role="bold">know</emphasis>.</para>

   <bridgehead><literal>[Filters]</literal> extra section</bridgehead>

   <para>When this section is present, it allows you to specify
    succesive filters to the data.</para>

   <itemizedlist>
    <listitem>
     <formalpara>
      <title><literal>filtersToApply</literal></title>
      <para>Here you specify which filters you want applied to the
       data and the order in which you want them applied.  Separate
       each filter name with a colon (<literal>:</literal>).  
       Currently there is one predefined filter:
       <literal>AnthonyNolan</literal>.
      </para>
     </formalpara>
    </listitem>
   </itemizedlist>

   <bridgehead><literal>[AnthonyNolan]</literal> filter section</bridgehead>

   <para>This section is <emphasis>only</emphasis> useful for HLA
    data, and only will be used if present in the
    <literal>filtersToApply</literal> line specified above.  If so
    enabled, your data will be filtered through The Anthony Nolan
    database of known HLA allele names <!-- which version of the WHO
    nomenclature release? --> before processing.  The data files this
    filter relies on are <emphasis>not</emphasis> currently
    distributed with <application>PyPop</application> but can be
    obtained via the <ulink
     url="ftp://ftp.ebi.ac.uk/pub/databases/imgt/mhc/hla/">IMGT ftp
     site</ulink>. Invocation of this filter will produce a
    <filename><replaceable>popfile</replaceable>-filter.xml</filename>
    file output showing what was resolved and what could not be
    resolved. </para>

   <itemizedlist>
    <listitem>
     <formalpara>
      <title><literal>alleleFileFormat</literal></title>
      <para>This options specifies which of the formats the  Anthony
       Nolan allele data will be used.  The option can be set to
       either <literal>txt</literal> (for the plain free text format)
       or <literal>msf</literal> (for the <ulink
	url="http://www.ebi.ac.uk/imgt/hla/download.html">Multiple
	Sequence Format</ulink>)  <emphasis role="bold">[Default:
	<literal>msf</literal>]</emphasis></para>
     </formalpara>
    </listitem>

    <listitem>
     <formalpara>
      <title><literal>path</literal></title>
      <para>Specifies the path to the root of the sequence files.  For
       <literal>txt</literal>: <emphasis role="bold">[Default:
	<filename
	 class="directory"><replaceable>prefix</replaceable>/share/PyPop/anthonynolan/HIG-seq-pep-text/</filename>]</emphasis>. 
       For <literal>msf</literal> files <emphasis
	role="bold">[Default: <filename
	 class="directory"><replaceable>prefix</replaceable>/share/PyPop/anthonynolan/msf/</filename>]</emphasis>.</para>
     </formalpara>
    </listitem>
   </itemizedlist>
  </section>

 </section>

<!--
 <section>
  <title>Output</title>

  <para>Interpretation of the output file is explained here: <ulink url="http://allele5.biol.berkeley.edu/13ihwg/instructions.html">http://allele5.biol.berkeley.edu/13ihwg/instructions.html</ulink></para>

 </section>
-->

 <xi:include href="biblio.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>

</article>

<!--
Local variables:
sgml-local-catalogs: ("catalog")
sgml-indent-step: 1
sgml-indent-data: 1
ispell-skip-html: t
End:
-->
