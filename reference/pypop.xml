<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
   "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<article condition="main" xmlns:xi="http://www.w3.org/2001/XInclude">

 <title>Software framework for IHWG Biostatistics Core</title>

 <articleinfo>
  <authorgroup>
   <author role="uc">
    <firstname>Alex</firstname>
    <surname>Lancaster</surname>
    
    <affiliation>
     <orgname>University of California, Berkeley</orgname>
     <orgdiv>Department of Integrative Biology</orgdiv>
     <address><street>3060 Valley Life Sciences</street>
      <city>Berkeley</city> <state>CA</state> <postcode>94720</postcode> 
      <country>USA</country>
      <email>alexl@socrates.berkeley.edu</email></address>
    </affiliation>
   </author>

   <author role="uc">
    <firstname>Mark</firstname>
    <othername>P.</othername>
    <surname>Nelson</surname>
   </author>

   <author role="uv">
    <firstname>Richard</firstname>
    <othername>M.</othername>
    <surname>Single</surname>
    <affiliation>
     <orgname>University of Vermont</orgname>
     <orgdiv>Department of Biometry</orgdiv>
     <address><street>Hills Science Building</street>
      <city>Burlington</city> <state>VT</state> <postcode>05405</postcode> 
      <country>USA</country></address>
    </affiliation>
   </author>

   <author role="uc">
    <firstname>Diogo</firstname>
    <surname>Meyer</surname>
   </author>

   <author role="uc">
    <firstname>Glenys</firstname>
    <surname>Thomson</surname>
   </author>
   
  </authorgroup>
  
  <pubdate>Last modified: $Date$</pubdate>
 </articleinfo>

<!--
 <abstract>
 <para>Software to analyze multi-locus genotype data for entire
 populations is useful for estimating haplotype frequencies,
 deviation from Hardy-Weinberg equilibrium and patterns of linkage
 disequilibrium.  These statistical results are important to both
 those interested in human genome variation and disease
 predisposition as well as evolutionary genetics.  As part of the
 13<superscript>th</superscript> International Histocompatibility
 and Immunogenetics Working Group (IHWG), we have developed a
 software framework (<application>PyPop</application>).  The primary
 novelty of this package is that it allows integration of statistics
 <emphasis>across</emphasis> large numbers of data-sets by heavily
 utilizing the XML file format and the <application>R</application> statistical package to view
 graphical output, while retaining the ability to inter-operate with
 existing software.  Largely developed to address human population
 data, it can, however, be used for population based data for any
 organism.  We tested our software on the data from the
 13<superscript>th</superscript> IHWG which involved data sets from
 at least 50 laboratories each of up to 1000 individuals with 9 MHC
 loci (both class I and class II) and found that it scales to large
 numbers of data sets well.</para>
 </abstract>
 -->

 <section>
  <title>Introduction</title> 

  <para>The <application>PyPop</application>
   (<emphasis>Py</emphasis>thon for <emphasis>Pop</emphasis>ulation
   Genetics) analysis package is suite of population genetic analyses
   and forms the base of the biostatistics core. It is in an
   object-oriented framework implemented in the programming language
   Python. The object-oriented approach allows us to implement
   individual analysis modules which can be inserted or removed
   without affecting other modules. Python is a flexible scripting
   language which allows rapid prototyping of code and has powerful
   features for interfacing with other languages, such as C (in which
   we have already implemented many routines and which is particularly
   suited to computationally intensive tasks).  The output of the
   analyses are stored in the XML format (XML is the eXtensible Markup
   Language devised by the World Wide Web Consortium, and is a
   platform-independent, vendor-neutral, non-proprietary, open
   standard for storing data <citation>Bray:2000</citation>).  These
   output files can then be transformed using standard tools into many
   other data formats suitable for machine input (such as
   <application>PHYLIP</application> <citation
    role="citep">Felsenstein:1989</citation> or input for  spreadsheet
   programs such as Excel or statistical packages, such as
   <application>R</application>
   <citation>Ihaka:Gentleman:1996</citation>),  plain text, or HTML
   for human-readable format.  Storing the output in XML allows the
   final viewable output format to be redesigned at will, without
   requiring the (often time-consuming) re-running of the analyses
   themselves. Data from the anthropology, transplantation, disease
   and cytokine components have been analyzed using
   <application>PyPop</application>.</para>


<!--
  <para condition="psb2003">Several major factors account for
   variation in the human genome: <emphasis>mutation,</emphasis>
   <emphasis>random genetic drift</emphasis>,
   <emphasis>migration</emphasis> (or <emphasis>gene flow</emphasis>)
   and <emphasis>natural selection</emphasis>.  Understanding of the
   relative roles of these evolutionary forces is important for the
   study of both complex and Mendelian diseases, since they can affect
   our ability to identify and localize disease predisposing variants
   and our power to recognize underlying functional mechanisms through
   which predisposing genes can become relatively common in a
   population.</para>

  <para>In particular, genetic systems which are highly polymorphic
   can implicate natural selection as an important factor in
   maintaining variation.  Genetic systems such as the Human Leukocyte
   Antigen (HLA) region (the Major Histocompatibility Complex [MHC]
   for humans) are highly polymorphic.  Six classical class I and II
   loci each contain up to 399 alleles <citation
    role="citep">Rhodes:Trowsdale:1999</citation>.
  </para>

  <para>Several basic population genetics statistics from multi-locus
   genotype data can help us understand these patterns of variation,
   and their implications for disease studies and evolutionary
   genetics.  These statistics include, but are not limited to
   estimating haplotype frequencies, identifying deviation from
   Hardy-Weinberg equilibrium and locating patterns of linkage
   disequilibrium in a given population.</para>

  <para>In population studies several implementations of programs and
   routines to calculate these basic statistics exist, but are mainly
   oriented towards analyzing statistics on a population-by-population
   basis.  The ability to cross-correlate these statistical features
   across many population data-sets will enable the identification of
   features in the genetic data that can further our understanding of
   the functional and disease predisposing role of specific alleles,
   and conversely allow us to rule out others.</para>

  <para>Currently, packages for analyzing population data already
   exist such as
   <application>Arlequin</application> <citation>Schneider:2000</citation>, 
   <application>PHYLIP</application> <citation
    role="citep">Felsenstein:1989</citation> and
   <application>Genepop</application> <citation>Raymond:Rousset:1995</citation>. In
   general, however, they are not oriented towards large-scale
   cross-population data analyses.  Analogous to the tools being
   developed for sequence analysis and search, we seek a framework in
   which basic statistical data from population genetic analyses can
   be housed, interrogated and visualized in such a way that important
   features of interest to both the biomedical investigator and the
   evolutionary biologist can be highlighted.</para>

  <para>We also did not want to reinvent the wheel, so, where possible
   we can inter-operate with existing population genetic analysis
   packages (either as part of the framework or through file formats).
   In this way, our software, <emphasis>PyPop</emphasis>
   (<emphasis>Py</emphasis>thon for <emphasis>Pop</emphasis>ulation
   Genetics) can be viewed as an integrating framework which draws on
   the strengths of existing tools in the community.</para>
-->

  <section>
   <title>IHWG: International Histocompatibility Working Group</title>

   <para>The primary motivation for developing this project was our
    role as the <quote>Biostatistics Core</quote> for the
    International Histocompatibility Working Group (<ulink
     url="http://www.ihwg.org/">IHWG</ulink>). <!-- The IHWG collected
    population data on the HLA region and largely focused on the HLA
    classical class I (A, B, and C) (1.8 Mb) and class II (DR, DQ, and
    DP) (1.2 Mb) genes, which flank the class III region on chromosome
    6 (ch. 6p21.31). --> As part of the Anthropology and Human
    Diversity component of the IHWG, HLA class I (A, B and C) and
    class II (DRA1, DRB1, DQA1, DQB1, DPA1 and DPB1) data from
    populations from upwards of 50 laboratories was made available via
    a database housed at the Fred Hutchison Cancer Research Institute
    (the <quote>Database Core</quote>). 

    <!-- The IHWG provided standardized typing reagents to each lab
    involved in the component, which resulted in high resolution genotype
    data for each population. -->

   </para>

   <para>

    <!-- The molecular characterization of these alleles allows us to
    use both the allele frequency (the raw allele
    <quote>calls</quote>) and the underlying sequence information (the
    <quote>calls</quote> can be converted into sequences if desired) -->

    Either allele names or sequence data can be used as
    as input, <application>PyPop</application> does not distinguish 
    between allele calls or sequence data and can transparently handle
    both.</para>

  </section>

  <section condition="psb2003">
   <title>Population genetic statistics</title>

   <para>The particular population analyses we wished to address
    included: (1) conformity to Hardy-Weinberg expectations, (2) tests
    for balancing or directional selection; (3) estimates of haplotype
    frequencies (and their distributions) and measures and tests of
    significance for linkage disequilibrium (LD) (among populations);
    and (4) other tests such as worldwide patterns of genetic
    differentiation. A description of the methodology for specific
    tests can be found in the Workshop Statistical Methods paper,
    chapters (reference?) of this volume.
    <xref
     linkend="pypop:modules"/>  briefly outlines the
    <application>PyPop</application> modules and specific
    implementation details of population genetic methods.</para>
  </section>

  <section>
   <title>Requirements</title>

   <para>The data sets for analysis were highly heterogeneous.
    Datasets varied considerably in the number of loci typed (from two
    to nine), number of individuals sampled (from 12 to 1012), and
    number of alleles at each locus (from 2 to 55).  Given that we had
    such highly diverse data sets, it was necessary to generate
    analyses that could be integrated in a systematic way.  This led
    to a set of requirements for the software framework:</para>

   <itemizedlist>

    <listitem>
     <formalpara>
      <title>modular</title> <para>each analysis (e.g. Hardy-Weinberg)
       can be run stand-alone or as part of a battery of tests</para>
     </formalpara>
    </listitem>

    <listitem>
     <formalpara><title>configurable</title>

      <para>analyses can be switched on or off as required by the user
       in a simple configuration file</para>

     </formalpara>
    </listitem>

    <listitem>
     <formalpara><title>machine-readable output</title>
      <para>all output from the analyses should be available as input
       to other programs, so successive stages in the output can be
       made available as input to later stages</para>
     </formalpara>
    </listitem>
    
    <listitem>
     <formalpara>
      <title>standardized output</title>

      <para>output should be generated in the open standard format
       XML, which is both machine readable and easily translated into
       human readable format (such as text)</para>
     </formalpara>
    </listitem>

    <listitem>
     <formalpara><title>integrating</title>

      <para>platform should allow simple integration of modules
       written in other languages (e.g., C, such as
       <application>emhaplofreq</application>, a program for haplotype
       frequency estimation for the highly polymorphic HLA loci)
       and/or third party software (such as
       <application>Arlequin</application>
       <citation>Schneider:2000</citation>,
       <application>Genepop</application>
       <citation>Raymond:Rousset:1995</citation>, and
       <application>PHYLIP</application>
       <citation>Felsenstein:1989</citation>, packages that deal with
       some aspects of population genetic statistics).</para>
     </formalpara>
    </listitem>
   </itemizedlist>

<!--
   <para>In using these programs, however, we realized a need for a
    tool that could integrate features of existing software, and where
    needed, implement missing features that would realize our goals of
    doing large-scale population genetic data analysis.  Specific
    limitations that we wished to address were:</para>

   <orderedlist>
    <listitem>
     <formalpara><title>Modularity</title> 

      <para>Programs should allow different options to be set for
       analysis and produce content that is easily parsable, not a
       monolithic output set of statistics (such as unstructured plain
       ASCII text or HTML).</para>
     </formalpara>
    </listitem>

    <listitem>
     <formalpara><title>Batch-ability</title>

      <para>It should be simple to set up an entire job in an
       unattended <quote>batch mode</quote>, involving the creation of
       (or modification of) a configuration file with a text editor,
       followed by the invocation of a script.  Software that relies
       on a <quote>captive user interface</quote>, for a population to
       be analyzed and requires user interaction such as mouse clicks
       and menus, makes it difficult to analyze hundreds of data sets.
      </para>
     </formalpara>
    </listitem>

    <listitem>
     <formalpara>
      <title>Scalability</title> 
      
      <para>It should be straightforward, for example, to gather a
       single statistic for several populations and display it in a
       table without a laborious manual search across many files. This
       relates partly to the previous point: often existing software
       was oriented towards smaller and less heterogeneous datasets.
       More typical in evolutionary genetics studies is integrating
       results across several populations at one or two loci, rather
       than many populations with a large number of loci and high
       variability in the number of individuals.</para>
     </formalpara>
    </listitem>
    
    <listitem>
     <formalpara>
      <title>Open-source</title>
      
      <para>We plan to release our software under an open source
       license <citation>OSI</citation>.  Software that is open-source
       allows others to extend and re-use components, allows
       inter-operation via an open and published interfaces, and can
       reduce duplication of effort within the community. Some
       existing software that was not open-source required reverse
       engineering of their file formats and run-time behaviour in
       order to be able to communicate and write interfaces to them.
      </para>
     </formalpara>
    </listitem>

    <listitem>
     <formalpara>
      <title>Cross-platform</title>

      <para>Software should be cross platform, and not be tied to
       proprietary features.  In particular it should be be available
       to run high-performance UNIX platforms such as GNU/Linux or
       Solaris as well as Windows and Macintosh platforms. </para>
     </formalpara>
    </listitem>
   </orderedlist>
-->
  </section>

 </section>

 <section>
  <title>Method</title>

  <section>
   <title>Overall design</title>

   <para>To integrate the data analyses for multiple populations, the
    analysis pipeline for <application>PyPop</application> has been
    designed in two major  phases.  The first are the basic
    population genetic analyses, and the second integrates the results
    of these analyses across multiple populations to generate
    text file output that can be read by any statistical package or
    spreadsheet program.  The overall data and work flow is shown in
    <xref
     linkend="pypop:work-flow"/>.</para>

   <figure id="pypop:work-flow">
    <title>Data flow</title>
    <mediaobject>
     <imageobject>
      <imagedata fileref="work-flow.jpg" align="center" scale="99"/>  <!-- scale="45" -->
     </imageobject>
     <textobject>
      <phrase>Diagram of software work-flow can be found at:
       http://allele5.biol.berkeley.edu/ihwg/work-flow.jpg</phrase>
     </textobject>
    </mediaobject>
   </figure>
  </section>

  <section>
   <title>Implementation</title>

   <para>We  implemented <application>PyPop</application> in the
    object-oriented scripting language Python
    <citation>vanRossum:2001</citation>.  It is an interpreted
    language allowing for rapid prototyping of modules and has a
    convenient standard library of functions.  Through use of the the
    Simple Wrapper Interface Generator (SWIG
    <citation>Beazley:1996</citation>), it is also straightforward to
    <quote>wrap</quote> existing code in C, C++ or Java and call it
    from Python.  We leveraged other open-source projects:
    Numeric Python <citation>Dubois:1996</citation> project, which
    provides efficient data structures for holding large arrays of
    data.  As our XSLT parser, we
    chose the fast C-based <application><ulink
      url="http://xmlsoft.org/">libxslt</ulink></application> from the
    <ulink url="http://www.gnome.org/">GNOME</ulink> project.
   </para>
  </section>

  <section id="pypop:modules">
   <title>PyPop modules</title>

   <para><application>PyPop</application> groups statistics into
    separate <emphasis>modules</emphasis>, represented in the data
    flow by the grey boxes in the group
    <literal>HardyWeinberg</literal>, <literal>Homozygosity</literal>
    and <literal>Haplotypes/LD</literal> in
    <xref linkend="pypop:work-flow"/>.  The modules are outlined
    below.  As noted earlier, detailed methodology can be found in
    Chapters ???.</para>
   
   <formalpara>
    <title>Population summary data</title>

    <para>labcode, typing method, ethnic group, continent of origin,
     collection site, latitude, longitude, total sample size, number
     of loci typed</para>
   </formalpara>

   <formalpara>
    <title>Locus-specific information</title>

    <para>locus name, sample size, number of distinct alleles
     observed, and the counts and frequencies of all alleles observed
     in the sample (ordered by frequency and then by allele
     name).</para>
   </formalpara>


   <formalpara>
    <title>Hardy-Weinberg proportions</title>

<!--
    <para>Hardy-Weinberg equilibrium essentially states that unless
     there are counteracting forces, the frequencies of alleles will
     not change in a population and the expected genotype frequencies
     each generation are determined by the allele frequencies, and are
     termed Hardy-Weinberg proportions (HWP).  In the context of
     multi-population analyses we can use deviation from HWP to
     determine whether this results from: (1) typing error (the first
     possibility investigated); (2) an <quote>admixed</quote>, or
     merged population; (3) operation of natural selection; or (4)
     inbreeding. </para>
-->

    <para>In addition to the traditional chi-square test, we performed
     the overall exact test of Hardy-Weinberg proportions (HWP) using
     <application>Arlequin</application>'s implementation of Guo &amp;
     Thompson's <citation
      role="citeyearpar">Guo:Thompson:1992</citation> method.  The
     <application>PyPop</application> framework has a facility to
     generate <application>Arlequin</application> format project
     (<filename>.arp</filename>) and settings
     (<filename>.ars</filename>) files,  execute the batch version of
     Arlequin, and re-import the results back into the framework for
     further downstream processing.  
    </para>
   </formalpara>

   <formalpara>
    <title>Ewens-Watterson test of neutrality</title> 

<!--
    <para>This is a test with the null hypothesis of neutral evolution
     and determines the probability that the observed homozygosity
     under HWP, for a given sample size and observed number of
     alleles, is more extreme than the expected homozygosity under
     random neutral mutations and genetic drift (neutrality).  This
     test can tell us whether selection, either directional (observed
     homozygosity &gt; expected homozygosity) or balancing (observed
     homozygosity &lt; expected homozygosity) is in operation on a
     particular locus across populations.
    </para>
-->

   <para>For the Ewens-Watterson (<citation
      role="citealt">Ewens:1972</citation>; <citation
      role="citealt">Watterson:1978</citation>) homozygosity test of
     neutrality we created an extension module in
     <application>PyPop</application>, that used a C implementation of
     a Monte-Carlo approximation to the exact test kindly provided by
     Montgomery Slatkin (<citation
      role="citeyear">Slatkin:1994</citation>, <citation
      role="citeyear">Slatkin:1996</citation>).  We  modified these
     programs to additionally report the normalized deviate of
     homozygosity (F<subscript>nd</subscript>) and the variance.  <!--
     We also checked results against a look-up table of simulation
     results by <citation>Salamon:1995?</citation> -->
    </para>

   </formalpara>
   
   <formalpara>
    <title>Haplotype frequency estimation and linkage disequilibrium</title>
    
<!--
    <para>Linkage disequilibrium (LD) describes the non-random
     association of alleles at different genetic loci.  Through
     estimating haplotype frequencies, it is possible to estimate LD
     in a population, the presence of significant LD can be due to
     history for very closely linked genes and can also indicate the
     operation of selection. </para>
-->

    <para>Haplotype frequencies (estimated using the
     expectation-maximization (EM) algorithm) and  linkage
     disequilibrium (LD) were calculated using a
     <application>emhaplofreq</application>, a C extension module that
     we wrote as part of the framework.</para>

   </formalpara>

<!--
   <formalpara>
    <title>Other statistics</title> 

    <para>Other individual-level population genetic statistics can
     also be calculated, such as F<subscript>st</subscript>, which
     describes the apportionment of genetic diversity within
     subpopulations, relative to a larger population, allowing us the
     estimate the amount of admixture in a population.</para>
   </formalpara>
-->

   <para>With the exception of the Arlequin implementation of the Guo
    &amp; Thompson HW exact test and Slatkin's Monte-Carlo
    implementation of the Ewens-Watterson test, new programs were
    developed to handle the highly polymorphic HLA loci.   However,
    they are not limited to use on HLA data, but are appropriate for
    analysis of any loci with less polymorphism than HLA.  In addition
    to the high level of polymorphism, large sample sizes in some
    cases (as many as 1,012 samples in an anthropology data set, and
    2,000 samples for the overall transplant data) are also
    problematic for methods using resampling and/or iterative
    procedures, such as the  HW exact test, haplotype estimation, and
    LD significance testing.
   </para>
  </section>

  <section>
   <title>Data flow</title>

   <para>Before running data through <application>PyPop</application>,
    ambiguities in typing had to be resolved (in our case this has
    been done by Steve Mack for the anthropology data, by Effie
    Petersdorf and Mari Malkki for the transplantation component, and
    by the respective disease chairs in the disease component).</para>

   <section>
    <title>Phase I</title>

    <para>In phase I, before analysis begins, the multi-locus genotype
     data for each population (stored in a text file with the
     <filename>.pop</filename> extension), can be passed through a
     filter module for data cleaning (for non-HLA data this module can
     be switched off).  The filter module is a set of rules that
     ensures that allele names are valid or otherwise have a match in
     the <ulink url="http://www.ebi.ac.uk/imgt/hla/">IMGT
      database</ulink> (a database of HLA alleles maintained by Steve
     Marsh of the Anthony Nolan Trust in the UK).  This procedure
     works as follows:</para>

    <orderedlist>
     <listitem>
      <para>Alleles in data set are reduced to a common denominator
       (typically four (4) digits)</para>
     </listitem>

     <listitem>
     
      <para>This reduced allele is checked to see whether it matches
       an allele in the IMGT/HLA database.  A match means that there
       is a common substring between the reduced allele and the IMTG/HLA
       database allele, up to the length of the common denominator
       (e.g., if <literal>0301</literal> is the reduced allele under
       question, then this  match as both <literal>03011</literal> and
       <literal>03012</literal>, and <literal>0301</literal> is
       returned as the common substring match).</para>
      
      <orderedlist numeration="loweralpha">
       <listitem>
	<para>If a match is found, then this reduced allele is used
	 in the data analysis.</para>
       </listitem>
       <listitem>
	<para>If a truncated allele which ends in a zero is found
	 (alleles that end in zero, such as <literal>0300</literal>
	  do not exist in the IMGT/HLA database) then:</para>
	<orderedlist numeration="lowerroman">
	 <listitem>
	  <para>If other alleles exist in the population with the
	   same prefix it is mapped to the allele which has the
	   highest frequency in the population under question (e.g.
	   if <literal>0300</literal> is the truncated allele, we
	   check to see if there are any alleles of the form
	   <literal>0301</literal>, <literal>0302</literal>, etc. in
	   the population).</para>
	 </listitem>
	 <listitem>
	  <para>If the allele does not exist in the population, then
	   the first allele which matches an existing allele
	   in the IMGT/HLA database, is used as the matching
	   allele.</para>
	 </listitem>
	</orderedlist>
       </listitem>
      </orderedlist>
     </listitem>
    
     <listitem>
      <para>If neither of the above checks result in a valid allele,
       an error message is output and the analysis is halted until the
       data is validated.</para>
     </listitem>

    </orderedlist>
   
    <para>After each population  was individually run through the set
     of <application>PyPop</application> modules, the output of
     results was forwarded to the contributing laboratory for review
     and appropriate revision of data. <!-- Although at present
     this is HLA-specific, it has been designed in such a way that it
     is simple to write a filter for other types of population data,
     and if desired (if the data is already <quote>clean</quote>), it
     can be simply switched off.  --> Next the analysis proper,
     begins. <!-- Depending on the users configuration, this can
     include basic allele count data; the Hardy-Weinberg statistics;
     haplotype estimates; and the Ewens-Watterson test of neutrality
     (represented by the green modules in <xref
     linkend="pypop:work-flow" />).  --> The results of the analyses
     are stored in an XML file format as shown in <xref
      linkend="pypop:sample-xml" />.</para>
   
    <figure id="pypop:sample-xml">
     <title>Extract from sample XML output file</title>
<programlisting><![CDATA[<dataanalysis date="2002-07-09-05-01-18">
   <filename>ukimid_nireland.pop</filename>
   <pypop-version>DEVEL_VERSION</pypop-version>
   <populationdata>
     <labcode>UKIMID</labcode>
     <method>SSOP</method>
     <ethnic>Irish</ethnic>
     <contin>Europe</contin>
     <collect>Northern Ireland</collect>
     <latit>54 degrees 40 minutes north</latit>
     <longit>6 degrees 45 minutes west</longit>
     <complex>3</complex>
     <popname>NIreland</popname>
     <totals>
       <indivcount>1000</indivcount>
       <allelecount>2000</allelecount>
       <locuscount>9</locuscount>
       <lociWithDataCount>4</lociWithDataCount>
     </totals>
   </populationdata>
   <locus name="A">
     <allelecounts>
       <untypedindividuals>0</untypedindividuals>
       <indivcount>1000</indivcount>
       <allelecount>2000</allelecount>
       <distinctalleles>26</distinctalleles>
       <allele name="0101">
         <frequency>0.20200 </frequency><count>404</count>
       </allele>
...
]]></programlisting>
    </figure>

    <para>XML was chosen as the output format because: 1) it can be
     read as input by other programs and; 2) it is readily
     transformable into human-readable form (e.g., a text file) or
     web-form (e.g., HTML) via XSLT (eXtensible Stylesheet Language
     for Transformations) <citation>Clark:1999</citation>.</para>
   </section>

   <section>
    <title>Phase II</title>

    <para>In phase II, the results of the analyses of the individual
     data files are integrated, and the benefits of using XML as the
     storage and exchange format are realized.  There are two major
     benefits: one relevant for displaying results of each individual
     run, the second, far more powerful benefit, for aggregating the
     data for cross-population meta-analyses and transforming it as
     input for third party packages.</para>

    <formalpara>
     <title>Generating human-readable output</title>
     <para>First, since many of the analyses (notably estimating the
      significance of all pairwise LD) can take a considerable amount
      of time, especially if the population consists of many
      individuals and is highly polymorphic, the <emphasis>analysis
       generation</emphasis> stage is decoupled from the
      <emphasis>analysis presentation</emphasis> stage.  This enables
      tweaking of the <quote>human-readable</quote> text output of the
      individual files of the presentation without completely
      re-running the analyses.  A sample text output is shown in <xref
     linkend="pypop:sample-txt" />. The same XML content can also be
      used to generate a web version (HTML) of the same data set.
     </para>
    </formalpara>

    <figure id="pypop:sample-txt">
     <title>Extract from sample plain text output generated from XML
      data</title>
<programlisting format="linespecific"><![CDATA[Performed on the 'ukimid_nireland.pop' file at: 2002-07-09-05-01-18

Population Summary
==================

       Lab code: UKIMID
  Typing method: SSOP
      Ethnicity: Irish
      Continent: Europe
Collection site: Northern Ireland
       Latitude: 54 degrees 40 minutes north
      Longitude: 6 degrees 45 minutes west
Population Name: NIreland
[...]

1.1. Allele Counts [A]
______________________

Untyped individuals: 0
Sample Size (n): 1000
Allele Count (2n): 2000
Distinct alleles (k): 26

Counts ordered by frequency   | Counts ordered by name        
Name      Frequency (Count)   | Name      Frequency (Count)   
0201      0.27400   548       | 0101      0.20200   404       
0101      0.20200   404       | 0201      0.27400   548       
]]></programlisting>
    </figure>

    <formalpara>
     <title>Combining results across populations</title>
    <para>Second, the results of Phase I are aggregated across
      populations.  As indicated in the <quote>Phase II</quote> box in
      <xref
       linkend="pypop:work-flow"/>, the individual XML files
      (indicated by <filename>out1.xml</filename> to
      <filename>outn.xml</filename> in the diagram) are transformed
      using an  XSLT stylesheet into tables of data that can be read
      by any spreadsheet or statistical package such as
      <application>R</application>.  The tables generated are all
      files of tab-separated values (TSV) that include:

      <itemizedlist>
       <listitem>
	<para><filename>1-locus-summary.dat</filename>: consists of a
	 line for population and locus, with fields for number of
	 gametes (<literal>n.gametes</literal>) number of distinct
	 alleles (<literal>k</literal>), Hardy-Weinberg
	 <varname>p</varname>-value for the Chi-square test
	 (<literal>hw.chisq.pval</literal>) and all other single locus
	 statistics (where a test was not performed or there was no
	 data, the <literal>****</literal> missing data is generated.
	</para>
       </listitem>
       <listitem>
	<para><filename>1-locus-allele.dat</filename>: consists of a
	 line for each population, locus and allele, the allele
	 frequency (<literal>allele.freq</literal>) and count
	 (<literal>allele.count</literal>) a short example of this
	 file is shown in <xref linkend="pypop:1-locus-allele.dat"/>
	 below.</para>
       </listitem>

       <listitem>
	<para><filename>2-</filename>,<filename>3-</filename>,
	 <filename>4-locus-summary.dat</filename>: consists of a line
	 for each population, and locus group (with separate files for
	 pairs, three or four locus), the  LD measure using  both D'
	 (<literal>ld.dprime</literal>) and W<subscript>n</subscript>
	 (<literal>ld.wn</literal>) measures and other overall tests
	 of LD.  </para>
       </listitem>

       <listitem>
	<para><filename>2-</filename>,<filename>3-</filename>,
	 <filename>4-locus-haplo.dat</filename>: this is analogue of
	 the <filename>1-locus-allele.dat</filename>, except with
	 information for each population's haplotype, such as the
	 haplotype count and frequency.</para>
       </listitem>

      </itemizedlist>To illustrate this process, short excerpts from
      the XML files (which include allele frequencies for the same
      locus, <quote>A</quote>) of two individual population runs
      <filename>Bugawan-Filipino-out.xml</filename> and
      <filename>CZEIVS-Czech-out.xml</filename> are shown below: <!--
      <xref linkend="pypop:meta-aggregate"/> -->.
    </para>
    </formalpara>

    <informaltable frame="none">
     <tgroup cols="2">
      <thead>
       <row>
	<entry>Excerpt from <filename>Bugawan-Filipino-out.xml</filename>
	</entry>
	<entry>
	 Excerpt from <filename>CZEIVS-Czech-out.xml</filename>
	</entry>
       </row>
      </thead>

      <tbody>
       <row>
	<entry>
<programlisting><![CDATA[...
<locus name="A">
<allelecounts>
<untypedindividuals>0</untypedindividuals>
<indivcount>94</indivcount>
<allelecount>188</allelecount>
<distinctalleles>16</distinctalleles>
<allele name="0101">
<frequency>]]><phrase role="strong">0.00532</phrase><![CDATA[</frequency>
<count>1</count>
</allele>
... ]]></programlisting>

	</entry>
	<entry>
<programlisting><![CDATA[...
<locus name="A">
<allelecounts>
<untypedindividuals>1</untypedindividuals>
<indivcount>105</indivcount>
<allelecount>210</allelecount>
<distinctalleles>22</distinctalleles>
<allele name="0101">
<frequency>]]><phrase role="strong">0.12857</phrase> <![CDATA[</frequency>
<count>27</count>
</allele>
... ]]></programlisting>

	</entry>
       </row>
      </tbody>
     </tgroup>
    </informaltable>
    
    <para>The phase II part of <application>PyPop</application>  merges the 
     allele frequencies (noted in <phrase role="strong">bold</phrase>) 
     of the separate XML files into a single text file, 
     <filename>1-locus-allele.dat</filename> which contains all the allele
     frequencies listed by population and by locus.  Here is an extract of the 
     file showing just two populations containing the same allele
     (note that some columns have been omitted for clarity):

     <figure id="pypop:1-locus-allele.dat">
      <title>Extract from <filename>1-locus-allele.dat</filename></title>
<programlisting>pop      ethnic   region     locus allele allele.freq allele.count
Filipino Filipino 06.Oceania A     0101   <phrase role="strong">0.00532</phrase><co id="filipino-dat"/>    1
...
Czech    Czech    03.Europe  A     0101   <phrase role="strong">0.12857</phrase><co id="czech-dat"/>    27</programlisting>
     </figure>
     
     <calloutlist>
      <title>Legend</title>
      <callout arearefs="filipino-dat">
       <para>Allele frequency of 0101 allele in Filipino population</para>
      </callout>
      <callout arearefs="czech-dat">
       <para>Allele frequency of 0101 allele in Czech population</para>
      </callout>
     </calloutlist>
    </para>

<!--   
   <para>A sample output of this process is shown in <xref
     linkend="pypop:ld.wn.summary"/>.  This is an output plot from
    <application>R</application> and depicts for each of the loci
    analyzed as part of the IHWG workshop, the proportion of
    populations in which the linkage disequilibrium, as measured by
    the W<subscript>n</subscript> statistic, exceed 0.6.</para>

   <figure id="pypop:ld.wn.summary">
    <title>Sample graphical output from meta-analysis:
    proportions of populations with linkage disequilibrium measure
    W<subscript>n</subscript> greater than 0.6</title>
    <mediaobject>
     <imageobject>
      <imagedata fileref="ld-wn-summary.jpg" scale="80"/>
     </imageobject>
    </mediaobject>
   </figure>
-->

   </section>


  </section>

  <section>
   <title>The next phase: dealing with PyPop output</title>

   <para>The final output of the phase II part of the PyPop package consist
    of both the <filename>.dat</filename> output tables and the
    individual XML files for each population included in the analysis.
    The former are simple text files consisting of tab-separated values
    (<abbrev>TSV</abbrev>) available for direct import to many
    statistical packages.  The latter are XML files which contain more
    information than the <filename>*.dat</filename> (such as numbers
    of steps required for convergence for the EM algorithm) and can
    likewise be used by programmers, as input for more sophisticated
    analyses.  We deal with each in turn.</para>

   <section>
    <title>Using the tables</title>

    <para>Packages to read the tables in the
     <filename>*.dat</filename> files can be divided into two kinds:
     graphical spreadsheet-style designed to be used by
     non-programmers, which can generate a wide-range of barcharts,
     pie charts and the like, and fully-fledged statistical packages,
     which often require some knowledge of scripting/programming but
     are often more powerful and better able to handle generation of
     large numbers of graphs and figures for large datasets.  The
     output that <application>PyPop</application> generates can be
     handled easily by both.   A non-exhaustive list of options
     includes:
    
    <itemizedlist>
      <listitem>
       <formalpara>
	<title>spreadsheet packages</title>
       
	<para><application>OpenOffice.org Calc</application>, part of
	 the open-source multi-platform Office package
	 <application><ulink
	   url="http://www.openoffice.org/">OpenOffice.org</ulink></application>, 
	 the <application>Gnumeric</application> spreadsheet package
	 available widely on UNIX and GNU/Linux systems, and
	 proprietary alternatives such as Microsoft
	 <application>Excel</application> on Windows and Macintosh
	 platforms can all easily handle <abbrev>TSV</abbrev> files.
	</para>
       </formalpara>
      </listitem>
     
      <listitem>
       <formalpara>
	<title>statistical packages</title>
	<para>The previously mentioned <application>R</application>,
	 and it's cousins <application>SPlus</application>,
	 <application>SASS</application> can all handle TSV text
	 files.  For all the graphical output described in the next
	 section, we wrote custom <application>R</application> scripts
	 (not currently part of <application>PyPop</application>)
	 highly specific to HLA data to generate various figures such
	 as barcharts, scatterplots and box plots from the raw table
	 output.
	</para>
       </formalpara>
      </listitem>
     </itemizedlist>
    </para>
   </section>

   <section>
    <title>Advanced options</title>

    <para>The XML output (both the individual population-level data
     files, and the aggregated multi-population data) can also be
     transformed (via XSLT) into formats suitable for input to other
     programs.  Currently we have a prototype module for generating
     input for <application>PHYLIP</application> and a prototype
     module to generate <application>Arlequin</application>
     <filename>.arp</filename> files.  We ultimately wish to develop
     an extensible <quote>plug-in</quote> XSLT architecture so that
     the output can be transformed into  formats suitable for other
     programs and packages in such a way that doesn't require the user
     to do their own programming.
    </para>

    <para>Finally, for  users who have programming abilities or staff
     to assist them, the raw XML files offer the opportunity for them
     to write custom XSLT stylesheets which could parse the XML and
     slice up the data in many ways. Alternatively it is possible to
     load the XML into a database and have the data queried using SQL.
    </para>
    
   </section>

  </section>
 </section>
 

 <section id="pypop:meta-results">
  <title>Results and sample output</title>

  <section>
   <title>Analyzing IHWG workshop data</title>
   
   <para>The <application>PyPop</application> framework was used to
    analyze the full set of IHWG data from both the
    12<superscript>th</superscript> and
    13<superscript>th</superscript> workshops.  With ? separate
    data-sets (some of which individually required several days to
    complete the basic per-population statistics), it was
    straightforward to set up a batch program to generate the
    individual output analyses.  For each file output, an individual
    XML file was generated.  From these individual XML files, using
    XSLT stylesheets as described above in phase II of
    <application>PyPop</application>, input data files for the
    statistical package, <application>R</application> were generated.
    
    For statistical analyses we used the statistical package
    <application>R</application>, the open-source implementation
     of the programming
    language <application>S</application>.  

    The <application>R</application> code was set up to generate
    overall graphical and numeric summaries for many population
    genetic parameters of interest. In particular, the analysis allows
    <quote>slicing</quote> of the data along a number of axes. As an
    example, we can view proportion of populations with significant  
    deviation from Hardy-Weinberg proportions, for all geographic
    regions at a given locus, or view all loci for a given region (data 
    not shown). As another example, we can view the number of populations
    that have data for a given region (<xref
    linkend="pypop:pops-by-locus"/>), or number of populations for
    which data was provided for a given locus (<xref
     linkend="pypop:pops-by-region"/>).</para>

   <figure id="pypop:pops-by-locus">
    <title>Sample metadata output: viewing number of populations by
     locus</title>
    <mediaobject>
     <imageobject>
      <imagedata fileref="pops-by-locus.jpg" scale="90"/>
     </imageobject>
    </mediaobject>
   </figure>

   <figure id="pypop:pops-by-region">
    <title>Sample metadata output, a second way to view data: number
     of populations within each region</title>
    <mediaobject>
     <imageobject>
      <imagedata fileref="pops-by-region.jpg" scale="90"/>
     </imageobject>
    </mediaobject>
   </figure>

<!--
   <para>This meta-analysis code is modular and can cope with non-HLA
    data, and thus can potentially be useful for other large-scale
    population genetic analyses.</para>
-->

   <para>For the IHWG analyses, the complete pipeline, from analyzing
    the individual data files, to the generation of the initial meta
    output <filename>*.dat </filename> files can be completely
    automated from the command-line. Further, the flexibility of the
    XML format, allows us to extract and output data easily for future
    data analyses without requiring regeneration of the basic
    population genetics statistics. However, once we had these basic
    outputs, this  was simply the beginning of the analysis, the
    jumping off point for the bulk of the data analyses, allowing
    further interactive exploration of the data.</para>

  </section>

  <section>
   <title>Role and significance</title>

   <para>It is important to note that <application>PyPop</application>
    is not attempting to supplant or replace other, more established,
    population genetics analysis packages. The basic population
    genetic statistics computed by <application>PyPop</application>
    are not new in and of themselves, nor is the ability to perform
    analyses on multiple populations (e.g.,
    <application>Arlequin</application> can currently do this).
    Indeed, <application>PyPop</application> can use existing packages
    to calculate them. However the approach of integrating information
    in highly heterogeneous datasets on a large scale is new, and not
    currently available in the evolutionary genetics community.  In
    addition to tests unavailable in existing projects, the uniqueness
    of the present project is that it is intended to be a
    high-throughput system that enables population genetics to join
    the realm of genomics.</para>

  </section>


  <section>
   <title>Future directions</title>

   <para>In the future we plan to continue development on the modules
    that can inter-operate with <application>PHYLIP</application> and
    <application>Arlequin</application>.  We also plan to take the
    Ewens-Watterson test of neutrality down to the amino-acid level
    (by considering each amino acid site as a genetic locus),
    necessitating the translation of the allele calls into sequence
    data (where possible).  This will result in a useful module for
    those wishing to analyze allele data at the sequence level.
    Longer-term possibilities include developing a graphical
    front-end, possibly web-based, integration with data mining tools
    such as clustering analysis, and integration with the NCBI's new
    <application><ulink
      url="http://www.ncbi.nlm.nih.gov/IEB/Research/GVWG/MHC/">dbMHC</ulink></application> 
    database.  We also plan to release the complete source code to
    <application>PyPop</application> under the GNU General Public
    License (<ulink
     url="http://www.gnu.org/licenses/gpl.html">GPL</ulink>). Details
    will be made available at the Thomson lab website: <ulink
     url="http://allele5.biol.berkeley.edu/">http://allele5.biol.berkeley.edu/</ulink>, 
    and the 13th Workshop's website: <ulink
     url="http://www.ihwg.org/">http://www.ihwg.org/</ulink>.</para>

  </section>
  
 </section>

 <ackno>This work has benefited from the support of NIH grant AI49213
  (13<superscript>th</superscript> IHW).  Thanks to Steve
  Mack.</ackno>

 <xi:include href="biblio.xml"/>
 
</article>
 
<!--
Local variables:
sgml-local-catalogs: ("catalog")
sgml-indent-step: 1
sgml-indent-data: 1
ispell-skip-html: t
End:
-->
