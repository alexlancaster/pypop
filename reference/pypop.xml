<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
   "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<?PSGML nofill programlisting screen?>
<article condition="main" xmlns:xi="http://www.w3.org/2001/XInclude">

 <title>Software framework for Biostatistics Core</title>

 <articleinfo>
  <authorgroup>
   <author role="uc">
    <firstname>Alex</firstname>
    <surname>Lancaster</surname>
    
    <affiliation>
     <orgname>University of California, Berkeley</orgname>
     <orgdiv>Department of Integrative Biology</orgdiv>
     <address><street>3060 Valley Life Sciences</street>
      <city>Berkeley</city> <state>CA</state> <postcode>94720</postcode> 
      <country>USA</country>
      <email>alexl@socrates.berkeley.edu</email></address>
    </affiliation>
   </author>

   <author role="uc">
    <firstname>Mark</firstname>
    <othername>P.</othername>
    <surname>Nelson</surname>
   </author>

   <author role="uv">
    <firstname>Richard</firstname>
    <othername>M.</othername>
    <surname>Single</surname>
    <affiliation>
     <orgname>University of Vermont</orgname>
     <orgdiv>Department of Biometry</orgdiv>
     <address><street>Hills Science Building</street>
      <city>Burlington</city> <state>VT</state> <postcode>05405</postcode> 
      <country>USA</country></address>
    </affiliation>
   </author>

   <author role="uc">
    <firstname>Diogo</firstname>
    <surname>Meyer</surname>
   </author>

   <author role="uc">
    <firstname>Glenys</firstname>
    <surname>Thomson</surname>
   </author>
   
  </authorgroup>
  
  <pubdate>Last modified: $Date$</pubdate>
 </articleinfo>

<!--
 <abstract>
 <para>Software to analyze multi-locus genotype data for entire
 populations is useful for estimating haplotype frequencies,
 deviation from Hardy-Weinberg equilibrium and patterns of linkage
 disequilibrium.  These statistical results are important to both
 those interested in human genome variation and disease
 predisposition as well as evolutionary genetics.  As part of the
 13<superscript>th</superscript> International Histocompatibility
 and Immunogenetics Working Group (IHWG), we have developed a
 software framework (<application>PyPop</application>).  The primary
 novelty of this package is that it allows integration of statistics
 <emphasis>across</emphasis> large numbers of data-sets by heavily
 utilizing the XML file format and the <application>R</application> statistical package to view
 graphical output, while retaining the ability to inter-operate with
 existing software.  Largely developed to address human population
 data, it can, however, be used for population based data for any
 organism.  We tested our software on the data from the
 13<superscript>th</superscript> IHWG which involved data sets from
 at least 50 laboratories each of up to 1000 individuals with 9 MHC
 loci (both class I and class II) and found that it scales to large
 numbers of data sets well.</para>
 </abstract>
 -->

 <section>
  <title>Introduction</title> 

  <para>The  <application>PyPop</application>
   (<emphasis>Py</emphasis>thon  for  <emphasis>Pop</emphasis>ulation
   Genetics)  package is a suite of programs  for  the  analysis  of
   population genetic data. The primary motivation   for   developing
   this  project  was  our  role  as  the "Biostatistics  Core" for
   the International Histocompatibility Working Group  (<ulink
    url="http://www.ihwg.org/">IHWG</ulink>). As part of the
   Anthropology and Human  Diversity  component  of the IHWG, HLA
   class I (A, B and C) and class II (DRA1, DRB1, DQA1, DQB1, DPA1 and
   DPB1) data from populations from  upwards  of  50  laboratories was
   made available via a database housed at the Fred Hutchison Cancer
   Research Institute.</para>

  <para>The  particular  population  analyses  we  wished  to address
   included conformity to Hardy-Weinberg Proportions (HWP); tests for
   balancing or directional selection; estimates of haplotype
   frequencies; measures of linkage  disequilibrium (LD) and tests of
   significance of LD; tests of genetic  differentiation;  and
   analyses  of  regional  and  worldwide patterns  of  allele
   frequencies,  haplotype  frequencies,  and LD. A description  of
   the methodology for specific tests can be found in the Statistical
   Methods  (<citation>Single  et  al.  2003</citation>)  chapter of
   the current volume.   Section  2  outlines  the  implementation of
   these population genetics methods via the different modules that
   make up PyPop.</para>

  <para><application>PyPop</application>   is   in   an
   object-oriented  framework  implemented  in  the programming
   language Python. The object-oriented approach allows us to
   implement  individual analysis modules that can be inserted or
   removed without  affecting  other  modules.  Python  is  a flexible
   scripting language  that  allows  rapid  prototyping  of code  and
   has powerful features  for interfacing with other languages, such
   as C (in which we have  already  implemented  many routines  and
   which is particularly suited  to  computationally intensive tasks).
   The  outputs  of  the analyses  are  stored  in the XML format (XML
   is the eXtensible Markup Language   devised  by the World  Wide Web
   Consortium,  and  is  a platform-independent, vendor-neutral,
   non-proprietary, open standard for  storing  data
   (<citation>Bray:2000</citation>)).  These  output  files can  then
   be transformed using standard tools into many other data formats
   suitable for  machine  input  (such  as  PHYLIP
   (<citation>Felsenstein:1989</citation>) or input for spreadsheet
   programs such as Excel or statistical packages, such as R
   (<citation>Ihaka:Gentleman:1996</citation>),  plain text,  or  HTML
   for "human-readable" format.  Storing  the  output in XML allows
   the final viewable output format  to  be  redesigned at  will,
   without requiring  the  (often time-consuming) re-running  of the
   analyses themselves. Data from the anthropology, transplantation,
   disease, and cytokine components have been analyzed using
   PyPop.</para>

   <para>The   analysis  modules,  described  in  section  2.3,  were
   designed specifically  to  handle  the  high  polymorphism of HLA
   data, but are appropriate  for  any data. PyPop can be used for
   analyses on a single population  or  multiple  populations.  The
   XML output facilitates the processing of results from analyses on
   large numbers of populations.</para>

  <section>
   <title>Requirements</title>

   <para>The  software was designed to handle the highly heterogeneous
    datasets for  the  13th Workshop. Datasets varied considerably in
    the number of loci  typed (from two to nine), number of
    individuals sampled (from 12 to  1012),  and  number of alleles at
    each locus (from 2 to 55). Given that  we  had  such  highly
    diverse sets of data, it was necessary to generate  analyses  that
    could be integrated in a systematic way. This led to the following
    set of requirements for the software framework.</para>

   <itemizedlist>

    <listitem>
     <formalpara>
      <title>Modular</title> 
      <para>Analyses  (e.g. tests of HWP) should be implemented as
       separate   modules   to   allow  the  output  from  each  test
       to  be self-contained,  and  tests  added in the future to be
       integrated into the package seamlessly without affecting
       existing tests.</para>
     </formalpara>
    </listitem>

    <listitem>
     <formalpara><title>Configurable</title>
      <para>Analyses should be able to be switched on or off as
       required by the user in a simple configuration file and should
       be able to be run stand-alone or as part of a battery of
       tests.</para>
     </formalpara>
    </listitem>

    <listitem>
     <formalpara><title>Machine-readable output</title>
      <para>Output  from  the  analyses should be available  as  input
       to  other  programs, so successive stages in the output can be
       made available as input to later stages.</para>
     </formalpara>
    </listitem>
    
    <listitem>
     <formalpara>
      <title>Standardized output</title>
      <para>Output  should  be  generated in the open
       standard  format  XML,  which  is  both  machine  readable  and easily
       translated into human-readable format (such as text).</para>
     </formalpara>
    </listitem>

    <listitem>
     <formalpara>
      <title>Cross-platform</title>
      <para>Software should be cross-platform, and not be tied to
       proprietary   features.   It   should  be  available  to  run
       on high-performance  UNIX  platforms such as GNU/Linux or
       Solaris as well as Windows and Macintosh platforms.</para>
     </formalpara>
    </listitem>


    <listitem>
     <formalpara><title>Integrating</title>

      <para>platform should allow simple integration of modules
       written in other languages such as C (e.g.,
       <application>emhaplofreq</application>, a program that we wrote
       to estimate haplotype frequencies for the highly polymorphic
       HLA loci), and/or third party software, packages that deal some
       aspects of population genetic statistics such as
       <application>Arlequin</application>
       <citation>Schneider:2000</citation>,
       <application>Genepop</application>
       <citation>Raymond:Rousset:1995</citation>, and
       <application>PHYLIP</application>
       <citation>Felsenstein:1989</citation>.</para>
     </formalpara>
    </listitem>
   </itemizedlist>
  </section>

 </section>

 <section>
  <title>Method</title>

  <section>
   <title>Overall design</title>

   <para>To integrate the data analyses for multiple populations, the
    analysis pipeline for <application>PyPop</application> was
    designed in two major  phases.  The first phase encompasses the
    population genetic analyses, and the second integrates the results
    of these analyses across multiple populations to generate
    text file output that can be read by a statistical package or
    spreadsheet program.  The overall data and workflow is shown in
    <xref
     linkend="pypop:work-flow"/>.</para>

   <figure id="pypop:work-flow">
    <title>Data flow</title>
    <mediaobject>
     <imageobject>
      <imagedata fileref="work-flow.jpg" align="center" scale="99"/>  <!-- scale="45" -->
     </imageobject>
     <textobject>
      <phrase>Diagram of software work-flow can be found at:
       http://allele5.biol.berkeley.edu/ihwg/work-flow.jpg</phrase>
     </textobject>
    </mediaobject>
   </figure>
  </section>

  <section>
   <title>Implementation</title>

   <para>We  implemented <application>PyPop</application> in the
    object-oriented scripting language Python
    <citation>vanRossum:2001</citation> which is an interpreted
    language allowing for rapid prototyping of modules. It also has a
    convenient standard library of functions.  Through use of the the
    Simple Wrapper Interface Generator (SWIG)
    (<citation>Beazley:1996</citation>), it was straightforward to
    <quote>wrap</quote> existing code in C, C++ or Java and call it
    from Python.  We leveraged other open-source projects such as
    Numeric Python <citation>Dubois:1996</citation> project, which
    provides efficient data structures for holding large arrays of
    data.  As our XSLT parser, we
    chose the fast C-based <application><ulink
      url="http://xmlsoft.org/">libxslt</ulink></application> from the
    <ulink url="http://www.gnome.org/">GNOME</ulink> project.
   </para>
  </section>

  <section id="pypop:modules">
   <title>PyPop modules</title>

   <para>In <application>PyPop</application> analyses are grouped into
    separate <emphasis>modules</emphasis>, represented in the data
    flow by five grey boxes labeled as <literal>Summary
     data</literal>, <literal>Locus info</literal>,
    <literal>HardyWeinberg</literal>, <literal>Homozygosity</literal>,
    and <literal>Haplotypes/LD</literal> in
    <xref linkend="pypop:work-flow"/>.  These modules are outlined
    below.  </para>
   
   <formalpara>
    <title>Population summary data</title>

    <para>This module extracts descriptive information from  the
     input  data  files,  such as labcode, typing method, ethnic
     group, continent of origin, collection site, latitude, longitude,
     total sample size, and number of loci typed.</para>
   </formalpara>

   <formalpara>
    <title>Locus-specific information</title>

    <para>Population  genetics  statistics  at the single-locus  level
     are tabulated in this module including locus name, sample size,
     number of distinct alleles observed, and the counts and
     frequencies of all alleles observed in the sample (ordered by
     frequency and then by allele name).</para>
   </formalpara>

   <formalpara>
    <title>Hardy-Weinberg proportions</title>

    <para>This module allows several implementations of  tests  for
     HWP.  In addition to the traditional chi-square test of HWP, we
     performed the overall exact test of Hardy-Weinberg proportions
     (HWP) using <application>Arlequin</application>'s implementation
     of Guo &amp; Thompson's <citation
      role="citeyearpar">Guo:Thompson:1992</citation> method.  The
     <application>PyPop</application> framework has a facility to
     generate <application>Arlequin</application> format project
     (<filename>.arp</filename>) and settings
     (<filename>.ars</filename>) files,  execute the batch version of
     the program, and re-import the results back into the framework for
     further downstream processing.  
    </para>
   </formalpara>

   <formalpara>
    <title>Ewens-Watterson test of neutrality</title> 

    <para>For the Ewens-Watterson (<citation
      role="citealt">Ewens:1972</citation>; <citation
      role="citealt">Watterson:1978</citation>) homozygosity test of
     neutrality we created an extension module in
     <application>PyPop</application>, that uses a C implementation of
     a Monte-Carlo approximation to the exact test kindly provided by
     the author (<citation
      role="citeyear">Slatkin:1994</citation>, <citation
      role="citeyear">Slatkin:1996</citation>).  We  modified these
     programs to additionally report the normalized deviate of
     homozygosity (F<subscript>nd</subscript>) and the variance.  <!--
     We also checked results against a look-up table of simulation
     results by <citation>Salamon:1995?</citation> -->
    </para>

   </formalpara>
   
   <formalpara>
    <title>Haplotype frequency estimation and linkage disequilibrium</title>

    <para>Haplotype frequencies (estimated using the
     expectation-maximization (EM) algorithm) and  linkage
     disequilibrium (LD) measures were calculated using a
     <application>emhaplofreq</application>, a C extension module that
     we wrote as part of the framework.</para>

   </formalpara>

   <para>With the exception of the Arlequin implementation of the Guo
    &amp; Thompson HWP exact test and Slatkin's Monte-Carlo
    implementation of the Ewens-Watterson test, new programs were
    developed to handle the highly polymorphic HLA loci.  They are not
    limited to use on HLA data and are appropriate for analysis of
    any loci with less polymorphism than HLA.  We designed
    <application>PyPop</application> to handle not only the high level
    of polymorphism, but also large sample sizes (e.g., sample sizes
    of over 1,000 for some anthropology data and 2,000 for the overall
    transplant data) which can be problematic for methods using
    resampling and/or iterative procedures, such as the HWP exact
    test, haplotype estimation, and LD significance testing.
   </para>
  </section>

  <section>
   <title>Data flow</title>

   <para>The input to <application>PyPop</application> is a text file
    with the <filename>.pop</filename> extension, containing the
    multi-locus genotype data for each population.  We use the .pop
    extension  to  refer to these files throughout, although any
    extension will  work.  The file format is described in <xref
     linkend="pypop:data-interchange-format"/>. Note that either
    allele names or sequence data can be used as  input since
    <application>PyPop</application>    will treat individual
    nucleotides as alleles</para>

   <section>
    <title>Pre-Analysis Processing</title>
    <para>The  input  data  file  can be passed through a filter
     module for data validation  before  being  passed  to any of the
     analysis modules. The filter  module  in  the  current
     implementation is a set of rules that ensures  that  allele names
     are  valid  and used consistently in all populations.  It can  be
     switched  off  if  it  is  not  needed.  An IHWG-specific filter
     was implemented as part of <application>PyPop</application> for
     the Workshop using    the <ulink
      url="http://www.ebi.ac.uk/imgt/hla/">IMGT/HLA database</ulink>,
     maintained  by  the Anthony Nolan Trust in the UK (see the
     chapters by <citation>Mack  et  al.</citation> and
     <citation>Robinson et al.</citation> in this volume for further
     details). For  other  regions  of  the genome, different  sets of
     rules can be defined and implemented easily.</para>
   </section>


<!--
    <orderedlist>
     <listitem>
      <para>Alleles in data set are reduced to a common denominator
       (typically four (4) digits)</para>
     </listitem>

     <listitem>
     
      <para>This <quote>reduced</quote> allele is checked to see
       whether it matches an allele in the <ulink
	url="http://www.ebi.ac.uk/imgt/hla/">IMGT/HLA database</ulink>
       (a database of HLA alleles maintained by the Anthony Nolan
       Trust in the UK).  A match means that there is a common
       substring between the reduced allele and the IMTG/HLA database
       allele, up to the length of the common denominator (e.g., if
       <literal>0301</literal> is the reduced allele under question,
       then this  match as both <literal>03011</literal> and
       <literal>03012</literal>, and <literal>0301</literal> is
       returned as the common substring match).</para>
      
      <orderedlist numeration="loweralpha">
       <listitem>
	<para>If a match is found, then this reduced allele is used
	 in the data analysis.</para>
       </listitem>
       <listitem>
	<para>If the reduced allele ends in a zero
	 (alleles that end in zero, such as <literal>0300</literal>
	  do not exist in the IMGT/HLA database) then:</para>
	<orderedlist numeration="lowerroman">
	 <listitem>
	  <para>If other alleles exist in the population with the
	   same prefix it is mapped to the allele which has the
	   highest frequency in the population under question (e.g.
	   if <literal>0300</literal> is the truncated allele, we
	   check for the hightest frequency among alleles of the form
	   <literal>0301</literal>, <literal>0302</literal>, etc. in
	   the population).</para>
	 </listitem>
	 <listitem>
	  <para>If the allele does not exist in the population, then
	   the first allele which matches an existing allele
	   in the IMGT/HLA database, is used as the matching
	   allele.</para>
	 </listitem>
	</orderedlist>
       </listitem>
      </orderedlist>
     </listitem>
    
     <listitem>
      <para>If neither of the above checks result in a valid allele,
       an error message is output and the analysis is halted until the
       data is validated.</para>
     </listitem>

    </orderedlist>
-->
   </section>

   <section>
    <title>Phase I (Analysis Generation)</title>

    <para>Phase I analysis consists of a run of a single  population
    data file run through a set of <application>PyPop</application>
    modules.   The  results of the Phase I analyses  are  stored  in
    an  XML  file (one per population) with the format  as  shown  in
    <xref linkend="pypop:sample-xml"/>.  XML was chosen as the output
    format in Phase  I because it is easily transformed into a text
    file (see <xref
     linkend="pypop:sample-txt"/>  in  the next  section),  a  web
    page,  or an input file for other programs via XSLT (eXtensible
    Stylesheet Language for Transformations)
    (<citation>Clark:1999</citation>).</para>

   <para>For the IHWG data, once each set of individual population
    analyses was complete,  a  plain  text  output file of results was
    forwarded to the contributing  laboratory  for review and
    appropriate revision of data. If the review of data required
    revisions, Phase I was repeated.</para>
   
   <figure id="pypop:sample-xml">
    <title>Extract from sample XML output file</title>
    <programlisting><![CDATA[<dataanalysis
      date="2002-07-09-05-01-18">
      <filename>ukimid_nireland.pop</filename>
      <pypop-version>DEVEL_VERSION</pypop-version> <populationdata>
      <labcode>UKIMID</labcode> <method>SSOP</method>
      <ethnic>Irish</ethnic> <contin>Europe</contin> <collect>Northern
      Ireland</collect> <latit>54 degrees 40 minutes north</latit>
      <longit>6 degrees 45 minutes west</longit> <complex>3</complex>
      <popname>NIreland</popname> <totals>
      <indivcount>1000</indivcount> <allelecount>2000</allelecount>
      <locuscount>9</locuscount>
      <lociWithDataCount>4</lociWithDataCount> </totals>
     </populationdata> <locus name="A"> <allelecounts>
      <untypedindividuals>0</untypedindividuals>
      <indivcount>1000</indivcount> <allelecount>2000</allelecount>
      <distinctalleles>26</distinctalleles> <allele name="0101">
      <frequency>0.20200 </frequency><count>404</count> </allele> ...
      ]]></programlisting>
    </figure>

   </section>

   <section>
   <title>Phase II (Post-Analysis Processing and Presentation)</title>

   <para>We  refer  to  the  transformation  of  the results from an
    individual population  into  human-readable form, the integration
    of results from multiple  populations,  and  the  transformation
    of  these aggregated results as input for third party packages
    jointly as Phase II. In this phase the benefits of using XML as
    the storage and exchange format are realized.  For  example, the
    intermediate XML output format allows the analysis  generation
    stage (Phase I) to be decoupled from the analysis
    presentation/processing  stage  (Phase  II).  This  decoupling
    enables tweaking  of the human-readable text output of the
    individual files of the  presentation  without completely
    re-running the analyses. A great deal  of time and effort can be
    saved in this manner since many of the analyses  (notably
    estimating the significance of all pairwise LD) can take  a
    considerable  amount of time, especially for large population
    samples with highly polymorphic loci.</para>

   <para>For  a  single  population, Phase II consists of the
    transformation of the  XML  output  into a text file or web page
    for easy viewing of the results.  A  portion of a sample text
    file, from the corresponding XML file in <xref
     linkend="pypop:sample-xml"/>, is shown in <xref
     linkend="pypop:sample-txt"/>.</para>


   <figure id="pypop:sample-txt">
    <title>Extract from sample plain text output generated from XML
     data</title>
    <programlisting format="linespecific"><![CDATA[Performed on the
      'ukimid_nireland.pop' file at: 2002-07-09-05-01-18 Population
      Summary ================== Lab code: UKIMID Typing method: SSOP
      Ethnicity: Irish Continent: Europe Collection site: Northern
      Ireland Latitude: 54 degrees 40 minutes north Longitude: 6
      degrees 45 minutes west Population Name: NIreland [...] 1.1.
      Allele Counts [A] ______________________ Untyped individuals: 0
      Sample Size (n): 1000 Allele Count (2n): 2000 Distinct alleles
      (k): 26 Counts ordered by frequency   | Counts ordered by name
      Name      Frequency (Count)   | Name      Frequency (Count) 0201
      0.27400   548       | 0101      0.20200   404 0101      0.20200
     404       | 0201      0.27400   548 ]]></programlisting>
   </figure>

   <para>The  results of the Phase I analyses can be aggregated across
    multiple populations.  As  shown  in  the  "Phase  II"  box  in
    <xref linkend="pypop:work-flow"/>, the individual  XML  files
    (indicated  by  <filename>out1.xml</filename>  to
    <filename>outn.xml</filename> in the diagram)  are transformed
    using an XSLT stylesheet into tables of data that  can be  read by
    any  spreadsheet  or statistical package. To illustrate this
    process, excerpts containing <literal>A*0101</literal> allele
     frequencies from  two XML  files  are shown in Figure 4. In this
     second stage of Phase II the allele frequencies (along with other
     statistics not shown in  this example)  are combined into a
     single text file. A portion of this text file, with the lines of
     data corresponding to the results in Figure  4,  are  shown  in
    <xref
     linkend="pypop:1-locus-allele.dat"/>. Values shown in both
    figures are highlighted  in  bold  (note that  some columns have
    been omitted for clarity).</para>

   <para>Below  is  a  list  of  the tables that we generated
    primarily for the analyses of the Anthropology component.</para>

   <itemizedlist>
    <listitem>
     <para><filename>1-locus-summary.dat</filename>: consists of a
      line for population and locus, with fields for number of gametes
      number of distinct alleles, HWP <varname>p</varname>-value and
      other single locus statistics.
     </para>
    </listitem>
    <listitem>
     <para><filename>1-locus-allele.dat</filename>: consists of a line
      for each combination of population, locus and allele. The line
      of data contains the allele frequency
      (<literal>allele.freq</literal>) and count
      (<literal>allele.count</literal>).   A sample excerpt from this
      file is shown in <xref linkend="pypop:1-locus-allele.dat"/>
      below.</para>
    </listitem>

     <listitem>
      <para><filename>2-</filename>,<filename>3-</filename>,
      <filename>4-locus-summary.dat</filename>: consists of a line for
      each combination of population, and locus group (with separate
      files for two, three, or four loci).   The line of data
      contains both of the D' and W<subscript>n</subscript> LD
      measures and the <varname>p</varname>-value for LD
      significance.</para>
     </listitem>

     <listitem>
      <para><filename>2-</filename>,<filename>3-</filename>,
       <filename>4-locus-haplo.dat</filename>: this is analogue of the
       <filename>1-locus-allele.dat</filename>, except with
       information for each population's haplotype, such as the
       estimated haplotype count and frequency.</para>
     </listitem>

   </itemizedlist>

   <figure>
    <title>Excerpts from two sample XML files of results</title>

   <informaltable frame="none">
    <tgroup cols="2">
     <colspec colwidth="9cm"/>
     <colspec colwidth="9cm"/>
     <thead>
      <row>
       <entry>Excerpt from
	<filename>Bugawan-Filipino-out.xml</filename>
       </entry>
       <entry>
	Excerpt from <filename>CZEIVS-Czech-out.xml</filename>
       </entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry>
	 <programlisting><![CDATA[... <locus name="A"> <allelecounts>
	  <untypedindividuals>0</untypedindividuals>
	  <indivcount>94</indivcount> <allelecount>188</allelecount>
	  <distinctalleles>16</distinctalleles> <allele name="0101">
	 <frequency>]]><phrase
	  role="strong">0.00532</phrase><![CDATA[</frequency>
	  <count>1</count> </allele> ... ]]></programlisting>

       </entry>
       <entry>
	 <programlisting><![CDATA[... <locus name="A"> <allelecounts>
	  <untypedindividuals>1</untypedindividuals>
	  <indivcount>105</indivcount> <allelecount>210</allelecount>
	  <distinctalleles>22</distinctalleles> <allele name="0101">
	 <frequency>]]><phrase role="strong">0.12857</phrase>
	  <![CDATA[</frequency> <count>27</count> </allele> ...
	  ]]></programlisting>

       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
   </figure>

   <para>The phase II part of <application>PyPop</application> merges
    the allele frequencies (noted in <phrase
     role="strong">bold</phrase>) of the separate XML files into a
    single text file, <filename>1-locus-allele.dat</filename> which
    contains all the allele frequencies listed by population and by
    locus.  Here is an extract of the file showing just two
    populations containing the same allele (note that some columns
    have been omitted for clarity):</para>

   <figure id="pypop:1-locus-allele.dat">
    <title>Extract from
     <filename>1-locus-allele.dat</filename></title>
    <programlisting>
   pop      ethnic   region       locus allele allele.freq allele.count
   Kenyan   Kenyan   01.SS-Africa A     0101   0.03147     9
   ...
   Tamil    Tamil    04.SW-Asia   A     0101   0.17000     17
</programlisting>
   </figure>

<!--
   <calloutlist>
    <title>Legend</title>
    <callout arearefs="filipino-dat">
     <para>Allele frequency of 0101 allele in Filipino
      population</para>
    </callout>
    <callout arearefs="czech-dat">
     <para>Allele frequency of 0101 allele in Czech population</para>
    </callout>
   </calloutlist>
-->
    
   <para>The <application>PyPop</application> application concludes
    with the generation of the <filename>*.dat</filename> files. The
    next  section  deals  with various possible uses of these results
    generated by Phase I and Phase II. The following analyses rely on
    these  files,  but their implementation is not part of the current
    PyPop framework.</para>

  </section>

  </section>

  <section>
   <title>Post PyPop: using the output</title>

   <para>When  information from a single population is of interest analyses may
   end  with the generation of a text file of results. Alternatively, the
   user  may wish to generate tables with information on many populations
   and  loci  which  we refer to as the *.dat files. These are text files
   consisting  of  tab-separated values (TSV) available for direct import
   to  many  statistical  packages.  The  XML  files,  which contain more
   information  than  the  *.dat files (such as numbers of steps required
   for  convergence  for  the  EM  algorithm),  can  be used as input for
   alternative analyses. We discuss each of these below.</para>

  <para>Packages to read the tables in the
   <filename>*.dat</filename> files can be divided into two kinds:
   graphical spreadsheet-style, which can generate a wide range of
   charts, graphs and summaries, and  statistical packages which
   offer a more flexible and powerful alternative, but often require
   greater computer expertise.  The output that
   <application>PyPop</application> generates can be handled easily
   by both.   Some potential options include the following:
    
   <itemizedlist>
    <listitem>
     <formalpara>
      <title>spreadsheet packages</title>
      
      <para><application>OpenOffice.org Calc</application>, part of
       the open-source multi-platform Office package
       <application><ulink
	 url="http://www.openoffice.org/">OpenOffice.org</ulink></application>, 
       the <application>Gnumeric</application> spreadsheet package
       available widely on UNIX and GNU/Linux systems, and
       proprietary alternatives such as Microsoft
       <application>Excel</application> on Windows and Macintosh
       platforms can all easily handle <abbrev>TSV</abbrev> files.
      </para>
     </formalpara>
    </listitem>
    
    <listitem>
       <formalpara>
      <title>statistical packages</title>
      <para><application>R</application>,
       <application>Splus</application>,
       <application>SAS</application>,
       <application>STATA</application>, and other programs can all
       handle TSV text files.  For, example in the case of the
       graphical output for the IHWG described in the next
       section, we wrote custom <application>R</application> scripts
       (not currently part of <application>PyPop</application>) highly
       specific to HLA data to generate various summaries and plots
       from aforementioned <filename>.dat</filename> files.
      </para>
     </formalpara>
    </listitem>
   </itemizedlist>
  </para>

  <para>The XML output (both the individual population-level data
   files, and the aggregated multi-population data) can also be
   transformed (via XSLT) into formats suitable for input to other
   programs.  Currently we have prototype modules for generating input
   for <application>PHYLIP</application> and
   <application>Arlequin</application>.  We ultimately wish to develop
   an extensible <quote>plug-in</quote> XSLT architecture so that the
   output can be transformed into  formats suitable for other programs
   and packages in  a way that does not require the user to do their
   own programming.
  </para>

  <para>Finally, the raw XML files offer the opportunity, for those
   who are so inclined, to write custom XSLT stylesheets that can
   parse the XML and transform the data in many ways. Alternatively
   it is possible to load the XML into a database and query the data
   using SQL.
  </para>

 </section>
 
 <section id="pypop:meta-results">
  <title>Results and sample output</title>

  <section>
   <title>Analyzing IHWG workshop data</title>
 
   <para>For  the  analysis  of  the  13th  IHWG  we  made extensive
    use of the potential  to  convert  XML  output  files  from
    individual population samples  into  combined  datasets
    containing  results  from  multiple samples.</para>
   
   <para>With over 140 separate datasets from the 12th and 13th
    workshops (some of which individually required a long time to
    complete the basic per-population analyses), it was
    straightforward to set up a batch program to generate an XML file
    of results for each individual population sample.  From these
    individual XML files, input data files for the statistical package
    <application>R</application> (the open-source implementation of
    the programming language <application>S</application>) were
    generated using XSLT stylesheets as described above in Phase II of
    PyPop.  This allowed us to write scripts in
    <application>R</application>  that  compared features among a
    large group of populations and loci.   Examples include  our
    ability to quantify how results for one particular test, for
    example deviation from HWP, were related to other features of the
    data, such as level of heterozygosity or the continent of  origin
    for the sample.  The results for many of these analyses can be
    found  in  chapters  XX,  XX,  XX,  and XX. As a simple example of
    <quote>slicing</quote>  the  data  along  different axes, we can
    view the number of populations  for which data was provided for a
    given locus (<xref
     linkend="pypop:pops-by-locus"/>), or number of populations that
    have data for a given region (<xref
     linkend="pypop:pops-by-region"/>). 
   </para>

   <figure id="pypop:pops-by-locus">
    <title>Sample metadata output: viewing number of populations by
     locus</title>
    <mediaobject>
     <imageobject>
      <imagedata fileref="pops-by-locus.jpg" scale="90"/>
     </imageobject>
    </mediaobject>
   </figure>

   <figure id="pypop:pops-by-region">
    <title>Sample metadata output, a second way to view data: number
     of populations within each region</title>
    <mediaobject>
     <imageobject>
      <imagedata fileref="pops-by-region.jpg" scale="90"/>
     </imageobject>
    </mediaobject>
   </figure>

   <para>For the IHWG analyses, the complete pipeline, from analyzing
    the individual data files to the generation of the  meta-data
    <filename>*.dat </filename> files, can be completely automated from
    the command-line.  Furthermore, the flexibility of the XML format
    allows us to easily extract and output data for future data
    analyses, without requiring regeneration of the basic population
    genetics statistics.</para>

  </section>

  <section>
   <title>Role and significance</title>

   <para>It is important to note that <application>PyPop</application>
    is not attempting to supplant or replace other, more established,
    population genetics analysis packages. Rather,  we  have designed
    it to synthesize and enhance the tools  that are currently
    available, while at the same time adding new methodological
    options.  Indeed,  PyPop  can use existing packages to compute  a
    variety of statistics and tests. The added value that PyPop brings
    is  the ability to supplement the results from various sources in
    order  to offer analyses with a greater breadth and depth, without
    having  to  reformat  the  data  for  each  separate  application.
    The modularity  and  prototyping  capabilities  of  the  program
    make it a particularly  efficient tool for integrating the rapidly
    growing array of population genetic analyses methods and
    implementations. Therefore, as  new  methods  are  developed, they
    can be incorporated into PyPop. Several  enhancements  and  new
    methods  that  are  part of PyPop are briefly described
    below.</para>

   <para>The approach of integrating information in highly
    heterogeneous datasets on a large scale is new, and not currently
    available in the evolutionary genetics community.  In addition to
    adding some tests that are unavailable in existing projects,
    <application>PyPop</application> is unique in that it is can be
    used as a high-throughput system that enables population genetics
    to join the realm of genomics.</para>

   <para>The  abovementioned  features  of  PyPop  facilitate
    analyses  of the behavior   of   specific   statistics   across
    populations  and  the relationships   among   different
    statistics   within   and   across populations.  For  example,  it
    is relatively simple to search for the presence  or absence of
    particular alleles or haplotypes across ethnic groups  or
    geographic  regions.  Also,  the  availability  of several
    measures  of overall LD (e.g., Wn, D', and the standardized
    likelihood ratio  test  statistic)  have  allowed  us  to
    investigate  how these measures  differ in the information they
    convey about LD in the highly polymorphic  HLA  data. As a final
    example, it has been informative to look  at  the  degree  of LD
    and rejection of HWP for populations with different levels of
    heterozygosity, complexity, etc.</para>

   <para>A  feature of PyPop that has proved very useful in the
    analysis of the workshop   data   is   the   availability   of
    tests  for  individual heterozygotes (Chen and Thomson, 1999) and
    genotypes in the context of HWP  that  are  not  available  in
    other  software. These tests allow investigation  of  the
    specific genotypes that contribute most to any overall
    significant deviation from HWP. We are currently working on a
    permutation-based  test of individual genotypes for HWP and
    individual D'ij  values  that  will provide similar capabilities
    for LD analyses. Currently,  these  are implemented using a
    chi-square test. Additional modules  for investigating patterns
    indicative of selection, including Disequilibrium   Pattern
    Analysis  (Thomson  and  Klitz,  1987)  and Constrained
    Disequilibrium   Values   (Robinson   et   al.,   1991a;
    ALSO...b)b),  are  in  progress.  PyPop was designed to handle
    missing data  in  a flexible manner that is consistent across all
    modules (see Appendix  A  for  a description of the
    implementation). This important aspect  of  data  processing  and
    analysis  is often implemented in a cumbersome  and  sometimes
    inconsistent manner, requiring reformatting of the data.</para>

  </section>

  <section>
   <title>Future directions</title>

   <para>In the future we plan to continue development on the modules
    that can inter-operate with <application>PHYLIP</application> and
    <application>Arlequin</application>.  We also plan to develop a
    module that can associate each allele name to an underlying
    amino-acid sequence (for residues that are known). Analyses may
    then be run by considering each amino acid site as a genetic
    locus, rather than the entire allele, as is done currently. This
    will result in a useful module for those wishing to analyze allele
    data at the sequence level. Longer-term possibilities include
    developing a graphical front-end, possibly web-based, integration
    with data mining tools such as clustering analysis, and
    integration with the NCBI's new <application><ulink
      url="http://www.ncbi.nlm.nih.gov/IEB/Research/GVWG/MHC/">dbMHC</ulink></application> 
    database.  We also plan to release the complete source code to
    <application>PyPop</application> under the GNU General Public
    License (<ulink
     url="http://www.gnu.org/licenses/gpl.html">GPL</ulink>). Details
    will be made available at the Thomson lab website: <ulink
     url="http://allele5.biol.berkeley.edu/">http://allele5.biol.berkeley.edu/</ulink>, 
    and the 13th Workshop's website: <ulink
     url="http://www.ihwg.org/">http://www.ihwg.org/</ulink>.</para>

  </section>
  
 </section>

 <ackno>This  work  has  benefited from the support of NIH grant
  AI49213 (13th IHW).  Thanks  to  Steven J. Mack, Kristie A. Mather,
  Steve Marsh, and Leslie Louie for helpful comments and
  testing.</ackno>

 <xi:include href="biblio.xml"/>
 
</article>
 
<!--
Local variables:
sgml-local-catalogs: ("catalog")
sgml-indent-step: 1
sgml-indent-data: 1
ispell-skip-html: t
End:
-->
