<?xml version='1.0'?>
<!DOCTYPE xsl:stylesheet PUBLIC "-//Thomson Lab//DTD Unofficial XSL//EN"  
                         "xsl.dtd">  
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                version='1.0'>

 <xsl:import href="http://db2latex.sourceforge.net/docbook.xsl"/>

 <xsl:output method="text" encoding="ISO-8859-1" indent="yes"/>

 <!-- standard one col article -->
 <xsl:variable name="latex.standard.1col">
% -------------------------------------------- 
% Autogenerated LaTeX file for articles        
% -------------------------------------------- 
\ifx\pdfoutput\undefined 
\documentclass[spanish,french,english,letter,10pt,twoside]{article} 
\else
\documentclass[pdftex, spanish,french,english,letter,10pt,twoside]{article}
\fi
\usepackage{amsmath,amsthm, amsfonts, amssymb, amsxtra,amsopn}
\usepackage{graphicx}
\usepackage{float}
\usepackage{algorithmic}
\usepackage[dvips]{hyperref}
 </xsl:variable>

 <!-- "World Scientific" style -->
 <xsl:variable name="latex.world-scientific">
% --------------------------------------------  
% Autogenerated LaTeX  using ws-p8-50x6-00.cls 
% --------------------------------------------  
\ifx\pdfoutput\undefined
\documentclass{ws-p8-50x6-00}       
\else
\documentclass[pdftex]{ws-p8-50x6-00}       
\fi
\usepackage{amsmath,amsthm,amsfonts,amssymb,amsxtra,amsopn}
\usepackage{graphicx}
\usepackage{float}
\usepackage{algorithmic}
\usepackage[dvips]{hyperref}
 </xsl:variable>

 <xsl:variable name="latex.mapping.xml" select="document('ws.latex.mapping.xml')"/>

 <xsl:variable name="latex.override">
  <xsl:value-of select="$latex.world-scientific"/> 
 </xsl:variable>

 <xsl:template match="ulink">
  <xsl:text>{\tt </xsl:text>
  <xsl:value-of select="@url"/> 
  <xsl:text>}</xsl:text>
 </xsl:template>


 <!-- ARTICLE TEMPLATE -->
 <xsl:template match="article">
  <!-- Output LaTeX preamble -->
  <xsl:call-template name="generate.latex.article.preamble"/>
  <!-- Get and output article title -->
  <xsl:variable name="article.title">
   <xsl:choose>
    <xsl:when test="./title"> <xsl:value-of select="./title"/> </xsl:when>
    <xsl:when test="./articleinfo/title"> <xsl:value-of select="./articleinfo/title"/> </xsl:when>
    <xsl:otherwise> <xsl:value-of select="./artheader/title"/> </xsl:otherwise>
   </xsl:choose>
  </xsl:variable>
  <xsl:text>\title{</xsl:text>
  <xsl:call-template name="normalize-scape"> 
   <xsl:with-param name="string" select="$article.title"/>
  </xsl:call-template>

  <xsl:text>}&#10;</xsl:text>
  <!-- Display author information --> 
  <xsl:text>\author{</xsl:text>
  <xsl:choose>
   <xsl:when test="artheader/author">		
    <xsl:apply-templates select="artheader/author"/>	
   </xsl:when>
   <xsl:when test="artheader/authorgroup">	
    <xsl:apply-templates select="artheader/authorgroup"/>	
   </xsl:when>
   <xsl:when test="articleinfo/author">	
    <xsl:apply-templates select="articleinfo/author"/>	
   </xsl:when>
   <xsl:when test="articleinfo/authorgroup">	
    <xsl:apply-templates select="articleinfo/authorgroup"/>
   </xsl:when>
   <xsl:otherwise>
    <xsl:apply-templates select="author"/>
   </xsl:otherwise>
  </xsl:choose>
  <xsl:text>}&#10;</xsl:text>

  <xsl:if test="articleinfo/author/affiliation">
   <xsl:text>\address{</xsl:text>
   <xsl:apply-templates select="articleinfo/author/affiliation"
    mode="header"/>
   <xsl:text>}&#10;</xsl:text>
  </xsl:if>
  
  <!-- Display  begindocument command -->
  <xsl:value-of select="$latex.article.begindocument"/>
  <xsl:value-of select="$latex.article.maketitle"/>
  <xsl:apply-templates/>
  <xsl:value-of select="$latex.article.end"/>
 </xsl:template>

 <xsl:template match="affiliation" mode="header">

  <xsl:for-each select="*[not(self::address)]">
   <xsl:if test="position()!=1">
    <xsl:text>, </xsl:text>
   </xsl:if>
   <xsl:value-of select="."/>
  </xsl:for-each>

  <xsl:if test="address">
   <xsl:text>, </xsl:text>
   <xsl:apply-templates select="address" mode="header"/>
  </xsl:if>
 </xsl:template>

 <xsl:template match="address" mode="header">
  <xsl:for-each select="*[not(self::email)]">
   <xsl:if test="position()!=1">
    <xsl:text>, </xsl:text>
   </xsl:if>
   <xsl:value-of select="."/>
  </xsl:for-each>
  
  <xsl:if test="email">
   <xsl:text>\\</xsl:text>
   <xsl:text>{\tt </xsl:text>
   <xsl:value-of select="email"/>
   <xsl:text>}</xsl:text>
  </xsl:if>
  
 </xsl:template>

</xsl:stylesheet>

<!--
Local variables:
sgml-local-catalogs: ("catalog")
End:
-->
