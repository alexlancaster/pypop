#!/usr/bin/env python

# This file is part of PyPop

# Copyright (C) 2003, 2004. The Regents of the University of California
# (Regents) All Rights Reserved.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.

# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
# 02111-1307, USA.

# IN NO EVENT SHALL REGENTS BE LIABLE TO ANY PARTY FOR DIRECT,
# INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING
# LOST PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS
# DOCUMENTATION, EVEN IF REGENTS HAS BEEN ADVISED OF THE POSSIBILITY
# OF SUCH DAMAGE.

# REGENTS SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE. THE SOFTWARE AND ACCOMPANYING
# DOCUMENTATION, IF ANY, PROVIDED HEREUNDER IS PROVIDED "AS
# IS". REGENTS HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT,
# UPDATES, ENHANCEMENTS, OR MODIFICATIONS.

import os, sys
from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter, FileType
from pathlib import Path

DIR = os.path.abspath(os.path.dirname(__file__))
sys.path.insert(0, os.path.join(DIR, '..'))

from PyPop.Meta import Meta

datapath = os.path.join(sys.prefix, 'share', 'PyPop')



parser = ArgumentParser(prog="popmeta.py", description="""Processes XMLFILEs and generates 'meta'-analyses. XMLFILE are
expected to be the XML output files taken from runs of 'pypop'.  Will
skip any XML files that are not well-formed XML.""", formatter_class=ArgumentDefaultsHelpFormatter)

parser.add_argument("-o", "--outputdir", help="put output in directory DIR",
                    required=False, type=Path, default=None)
parser.add_argument("--disable-dat", help="disable generation of *.dat files",
                    action='store_false', dest="generate_dat", required=False, default=True)
parser.add_argument("--enable-ihwg", help="enable 13th IWHG workshop populationdata default headers",
                    action='store_true', required=False, default=False)
parser.add_argument("--output-meta", help="dump the meta output file to stdout, ignore xslt file",
                    action='store_true', required=False, default=False)
parser.add_argument("-x", "--xsldir", help="use specified directory to find meta XSLT", 
                    metavar="XSLDIR", required=False, default=None)
group = parser.add_mutually_exclusive_group(required=False)
group.add_argument("--enable-phylip", help="enable generation of PHYLIP *.phy files",
                    action='store_true', required=False, default=False)
group.add_argument("-b", "--batchsize", help="process in batches of size total/FACTOR rather than all at once, by default do separately (batchsize=0)",
                    type=int, metavar="FACTOR", required=False, default=0)

parser.add_argument("xmlfiles", metavar="XMLFILE", help="XML ('.xml') file(s) generated by pypop runs", nargs='+', default=[])
args = parser.parse_args()

# find our exactly where the current executable is being run from
popmetabinpath = os.path.dirname(os.path.realpath(sys.argv[0]))

metaXSLTDirectory = args.xsldir
dump_meta = args.output_meta
R_output = args.generate_dat
PHYLIP_output = args.enable_phylip
ihwg_output = args.enable_ihwg
batchsize = args.batchsize
outputDir = args.outputdir

if PHYLIP_output:
  batchsize = 1   #  set batch size to 1

if outputDir:
    if not outputDir.is_dir():
      sys.exit("'%s' is not a directory, please supply a valid output directory" % outputDir)
  
# parse arguments
xml_files = args.xmlfiles

Meta(popmetabinpath=popmetabinpath,
     datapath=datapath,
     metaXSLTDirectory=metaXSLTDirectory,
     dump_meta=dump_meta,
     R_output=R_output,
     PHYLIP_output=PHYLIP_output,
     ihwg_output=ihwg_output,
     batchsize=batchsize,
     outputDir=outputDir,
     xml_files=xml_files)
