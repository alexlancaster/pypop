[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
xfail_strict = true
# convert warnings to errors, except for ImportWarnings in numpy (needed for pp38)
# FIXME: eventually we should be able to remove the numpy exception
filterwarnings = ["error", "default::ImportWarning"]
log_cli_level = "info"
testpaths = [
  "tests",
]

[tool.cibuildwheel]
skip = ["*-win32", "*_i686",  # skip 32-bit builds
        "pp37-*",             # skip certain PyPy configurations
	"pp*_aarch64 ",       # no numpy wheels for aarch64 on PyPy
        "cp313-musllinux_x86_64", # problem with this version
        "cp36-musllinux_*", "cp37-musllinux_*", "cp38-musllinux_*"] # older musllinux missing numpy wheels
test-extras = ["test"]

# FIXME: can add "test-command" that would allow unit test output to be saved
# "pytest -v {package}/tests && echo {package} && ls && tar zcvf unit_tests_output.tar.gz run_test_* && cp unit_tests_output.tar.gz {package}/wheelhouse/"

# don't try and install pypi packages that need build from source
# this is mainly import during the testing phase
environment = { PIP_ONLY_BINARY=":all:" }

# use pip and override the PIP_ONLY_BINARY=:all: during wheel generation
# so that certain source-only build deps (like cffconvert) install
build-frontend = { name = "pip", args = ["--only-binary=:none:"] }

[[tool.cibuildwheel.overrides]]
# for latest CPython use newer manylinux image
select = "cp312-*linux*"
manylinux-x86_64-image = "manylinux_2_28"

[tool.cibuildwheel.linux]
# add aarch64 to default ("auto") architectures
archs = ["auto", "aarch64"]
# default linux wheels use CentOS-based runners, local cibuildwheel docker
before-all="yum install -y swig gsl-devel"

[[tool.cibuildwheel.overrides]]
# musl uses apk/apt
select = "*musllinux*"
before-all = "apk add swig gsl-dev"
# restore musllinux_1_1 image for the time being (musllinux_1_2 segfaults)
musllinux-x86_64-image="musllinux_1_1"

[tool.cibuildwheel.macos]
# use oras to get archived 2.7.1 bottles of `gsl` that has 10.15 (on x86) / 11.0 (on arm64) builds
# and archived 4.2.1 bottles of `swig` (swig 4.3.0 creates extensions that segfault)
before-all = ["brew install oras",
              "oras pull ghcr.io/homebrew/core/swig:4.2.1",
	      "oras pull ghcr.io/homebrew/core/gsl:2.7.1"] 
# re-enable if we need to  do a per-build 'gsl' installation to force correct architecture when
# cross-compiling (https://stackoverflow.com/a/75488269)
# before-build = [
#  "echo ARCHFLAGS = $ARCHFLAGS", # gets the arch at build-time
#  "if [[ $ARCHFLAGS == *arm64 ]]; then BOTTLE_TAG=arm64_big_sur gsl; else BOTTLE_TAG=x86_64_linux; fi",
#  "echo BOTTLE_TAG = $BOTTLE_TAG",
#]
# force old bottle brew fetch --force --bottle-tag=arm64_monterey gsl; brew reinstall $(brew --cache --bottle-tag=arm64_monterey gsl)"
archs = ["arm64", "x86_64"]  # don't enable "universal2" binary

[[tool.cibuildwheel.overrides]]
select = "*-macosx_*"
inherit.environment="append"
environment = { CPATH="/opt/homebrew/include", LIBRARY_PATH="/opt/homebrew/lib", PYTHONFAULTHANDLER="1" }

[[tool.cibuildwheel.overrides]]
select = "*-macosx_x86_64"
inherit.environment="append"
environment = { MACOSX_DEPLOYMENT_TARGET="10.15" } # target 10.15/Catalina
inherit.before-all="append"
# install `swig` and the Catalina version of `gsl` to match
before-all = ["brew install ./swig--4.2.1.monterey.bottle.tar.gz",
	   "brew install ./gsl--2.7.1.catalina.bottle.tar.gz"]

[[tool.cibuildwheel.overrides]]
select = "*-macosx_arm64"
inherit.environment="append"
environment = { MACOSX_DEPLOYMENT_TARGET="11.0" } # target for 11.0/Big Sur
inherit.before-all="append"			
# install `swig` and the Big Sur version of `gsl` to match
before-all = ["brew install ./swig--4.2.1.arm64_ventura.bottle.tar.gz",
	   "brew install ./gsl--2.7.1.arm64_big_sur.bottle.tar.gz"]

[tool.cibuildwheel.windows]
# use nuget to install gsl on Windows, and manually supply paths
before-all = "nuget install gsl-msvc14-x64 -Version 2.3.0.2779"

[[tool.cibuildwheel.overrides]]
select ="*-win_*"
inherit.environment="append"
environment = { CPATH="gsl-msvc14-x64.2.3.0.2779\\\\build\\\\native", LIBRARY_PATH="gsl-msvc14-x64.2.3.0.2779\\\\build\\\\native\\\\static" }

[tool.setuptools_scm]
write_to = "src/PyPop/_version.py"  # matches the path where version will be written

[build-system]
build-backend = "setuptools.build_meta:__legacy__"
requires = ["setuptools>=42",
	    "setuptools_scm[toml]>=6.2",
	    "cffconvert @ git+https://github.com/alexlancaster/cffconvert.git@combine_features#egg=cffconvert",
	    "importlib-metadata; python_version <= '3.8'"
	    ]


